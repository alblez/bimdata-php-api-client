<?php
/**
 * CheckerApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CheckerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CheckerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createChecker
     *
     * Create a checker to a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function createChecker($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createCheckerWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createCheckerWithHttpInfo
     *
     * Create a checker to a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckerWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createCheckerRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\IfcChecker' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcChecker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcChecker';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcChecker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckerAsync
     *
     * Create a checker to a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createCheckerAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCheckerAsyncWithHttpInfo
     *
     * Create a checker to a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcChecker';
        $request = $this->createCheckerRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createChecker'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCheckerRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createChecker'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createChecker'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createChecker'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createChecker'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCheckerResult
     *
     * Create a CheckerResult
     *
     * @param  string $checker_pk checker_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function createCheckerResult($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createCheckerResultWithHttpInfo
     *
     * Create a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createCheckerResultRequest($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CheckerResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckerResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckerResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckerResultAsync
     *
     * Create a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerResultAsync($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCheckerResultAsyncWithHttpInfo
     *
     * Create a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\CheckerResult';
        $request = $this->createCheckerResultRequest($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCheckerResult'
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCheckerResultRequest($checker_pk, $cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'checker_pk' is set
        if ($checker_pk === null || (is_array($checker_pk) && count($checker_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling createCheckerResult'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createCheckerResult'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createCheckerResult'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createCheckerResult'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createCheckerResult'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'checker_pk' . '}',
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCheckplan
     *
     * Create a Checkplan
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function createCheckplan($cloud_pk, $project_pk, $data)
    {
        list($response) = $this->createCheckplanWithHttpInfo($cloud_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createCheckplanWithHttpInfo
     *
     * Create a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckplanWithHttpInfo($cloud_pk, $project_pk, $data)
    {
        $request = $this->createCheckplanRequest($cloud_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CheckPlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckPlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckPlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckPlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckplanAsync
     *
     * Create a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckplanAsync($cloud_pk, $project_pk, $data)
    {
        return $this->createCheckplanAsyncWithHttpInfo($cloud_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCheckplanAsyncWithHttpInfo
     *
     * Create a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckplanAsyncWithHttpInfo($cloud_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\CheckPlan';
        $request = $this->createCheckplanRequest($cloud_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCheckplan'
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCheckplanRequest($cloud_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createCheckplan'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createCheckplan'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createCheckplan'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRule
     *
     * Create a Rule
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function createRule($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data)
    {
        list($response) = $this->createRuleWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data);
        return $response;
    }

    /**
     * Operation createRuleWithHttpInfo
     *
     * Create a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRuleWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data)
    {
        $request = $this->createRuleRequest($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Rule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRuleAsync
     *
     * Create a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleAsync($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data)
    {
        return $this->createRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRuleAsyncWithHttpInfo
     *
     * Create a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Rule';
        $request = $this->createRuleRequest($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRule'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRuleRequest($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling createRule'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRule'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRule'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling createRule'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createRule'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRuleComponent
     *
     * Create a RuleComponent
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $rule_pk rule_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function createRuleComponent($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        list($response) = $this->createRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data);
        return $response;
    }

    /**
     * Operation createRuleComponentWithHttpInfo
     *
     * Create a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        $request = $this->createRuleComponentRequest($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\RuleComponent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RuleComponent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RuleComponent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RuleComponent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRuleComponentAsync
     *
     * Create a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleComponentAsync($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        return $this->createRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRuleComponentAsyncWithHttpInfo
     *
     * Create a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\RuleComponent';
        $request = $this->createRuleComponentRequest($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRuleComponent'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRuleComponentRequest($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling createRuleComponent'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRuleComponent'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRuleComponent'
            );
        }
        // verify the required parameter 'rule_pk' is set
        if ($rule_pk === null || (is_array($rule_pk) && count($rule_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling createRuleComponent'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling createRuleComponent'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createRuleComponent'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'rule_pk' . '}',
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRuleset
     *
     * Create a Ruleset
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function createRuleset($check_plan_pk, $cloud_pk, $project_pk, $data)
    {
        list($response) = $this->createRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createRulesetWithHttpInfo
     *
     * Create a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $data)
    {
        $request = $this->createRulesetRequest($check_plan_pk, $cloud_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Ruleset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ruleset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ruleset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ruleset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRulesetAsync
     *
     * Create a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRulesetAsync($check_plan_pk, $cloud_pk, $project_pk, $data)
    {
        return $this->createRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRulesetAsyncWithHttpInfo
     *
     * Create a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Ruleset';
        $request = $this->createRulesetRequest($check_plan_pk, $cloud_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRuleset'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRulesetRequest($check_plan_pk, $cloud_pk, $project_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling createRuleset'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRuleset'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRuleset'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createRuleset'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteChecker
     *
     * Delete a checker of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteChecker($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteCheckerWithHttpInfo
     *
     * Delete a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckerAsync
     *
     * Delete a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCheckerAsyncWithHttpInfo
     *
     * Delete a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteChecker'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteChecker'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteChecker'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteChecker'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteChecker'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCheckerResult
     *
     * Delete a CheckerResult
     *
     * @param  string $checker_pk checker_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCheckerResult($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteCheckerResultWithHttpInfo
     *
     * Delete a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckerResultAsync
     *
     * Delete a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerResultAsync($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCheckerResultAsyncWithHttpInfo
     *
     * Delete a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCheckerResult'
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'checker_pk' is set
        if ($checker_pk === null || (is_array($checker_pk) && count($checker_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling deleteCheckerResult'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCheckerResult'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCheckerResult'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteCheckerResult'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteCheckerResult'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'checker_pk' . '}',
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCheckplan
     *
     * Delete a Checkplan
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCheckplan($cloud_pk, $id, $project_pk)
    {
        $this->deleteCheckplanWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation deleteCheckplanWithHttpInfo
     *
     * Delete a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCheckplanWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->deleteCheckplanRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckplanAsync
     *
     * Delete a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckplanAsync($cloud_pk, $id, $project_pk)
    {
        return $this->deleteCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCheckplanAsyncWithHttpInfo
     *
     * Delete a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteCheckplanRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCheckplan'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCheckplanRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCheckplan'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCheckplan'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteCheckplan'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRule
     *
     * Delete a Rule
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRule($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        $this->deleteRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk);
    }

    /**
     * Operation deleteRuleWithHttpInfo
     *
     * Delete a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        $request = $this->deleteRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRuleAsync
     *
     * Delete a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        return $this->deleteRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRuleAsyncWithHttpInfo
     *
     * Delete a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        $returnType = '';
        $request = $this->deleteRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRule'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling deleteRule'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteRule'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRule'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteRule'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling deleteRule'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRuleComponent
     *
     * Delete a RuleComponent
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $rule_pk rule_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRuleComponent($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        $this->deleteRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk);
    }

    /**
     * Operation deleteRuleComponentWithHttpInfo
     *
     * Delete a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        $request = $this->deleteRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRuleComponentAsync
     *
     * Delete a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleComponentAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        return $this->deleteRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRuleComponentAsyncWithHttpInfo
     *
     * Delete a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        $returnType = '';
        $request = $this->deleteRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRuleComponent'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling deleteRuleComponent'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteRuleComponent'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRuleComponent'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteRuleComponent'
            );
        }
        // verify the required parameter 'rule_pk' is set
        if ($rule_pk === null || (is_array($rule_pk) && count($rule_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling deleteRuleComponent'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling deleteRuleComponent'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'rule_pk' . '}',
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRuleset
     *
     * Delete a Ruleset
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRuleset($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        $this->deleteRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk);
    }

    /**
     * Operation deleteRulesetWithHttpInfo
     *
     * Delete a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        $request = $this->deleteRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRulesetAsync
     *
     * Delete a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRulesetAsync($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        return $this->deleteRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRulesetAsyncWithHttpInfo
     *
     * Delete a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRuleset'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling deleteRuleset'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteRuleset'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRuleset'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteRuleset'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateChecker
     *
     * Update all fields of a checker of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function fullUpdateChecker($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateCheckerWithHttpInfo
     *
     * Update all fields of a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcChecker' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcChecker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcChecker';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcChecker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateCheckerAsync
     *
     * Update all fields of a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateCheckerAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateCheckerAsyncWithHttpInfo
     *
     * Update all fields of a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcChecker';
        $request = $this->fullUpdateCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateChecker'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateChecker'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateChecker'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateChecker'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateChecker'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateChecker'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateCheckerResult
     *
     * Update all fields of a CheckerResult
     *
     * @param  string $checker_pk checker_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function fullUpdateCheckerResult($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateCheckerResultWithHttpInfo
     *
     * Update all fields of a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckerResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckerResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckerResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateCheckerResultAsync
     *
     * Update all fields of a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateCheckerResultAsync($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateCheckerResultAsyncWithHttpInfo
     *
     * Update all fields of a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\CheckerResult';
        $request = $this->fullUpdateCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateCheckerResult'
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'checker_pk' is set
        if ($checker_pk === null || (is_array($checker_pk) && count($checker_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling fullUpdateCheckerResult'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateCheckerResult'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateCheckerResult'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateCheckerResult'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateCheckerResult'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateCheckerResult'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'checker_pk' . '}',
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateCheckplan
     *
     * Update all fields of a Checkplan
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function fullUpdateCheckplan($cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->fullUpdateCheckplanWithHttpInfo($cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateCheckplanWithHttpInfo
     *
     * Update all fields of a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateCheckplanWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->fullUpdateCheckplanRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckPlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckPlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckPlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckPlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateCheckplanAsync
     *
     * Update all fields of a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateCheckplanAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->fullUpdateCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateCheckplanAsyncWithHttpInfo
     *
     * Update all fields of a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\CheckPlan';
        $request = $this->fullUpdateCheckplanRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateCheckplan'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateCheckplanRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateCheckplan'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateCheckplan'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateCheckplan'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateCheckplan'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateRule
     *
     * Update all fields of a Rule
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function fullUpdateRule($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        list($response) = $this->fullUpdateRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateRuleWithHttpInfo
     *
     * Update all fields of a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        $request = $this->fullUpdateRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Rule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateRuleAsync
     *
     * Update all fields of a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateRuleAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        return $this->fullUpdateRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateRuleAsyncWithHttpInfo
     *
     * Update all fields of a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Rule';
        $request = $this->fullUpdateRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateRule'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling fullUpdateRule'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateRule'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateRule'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateRule'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling fullUpdateRule'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateRule'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateRuleComponent
     *
     * Update all fields of a RuleComponent
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $rule_pk rule_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function fullUpdateRuleComponent($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        list($response) = $this->fullUpdateRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateRuleComponentWithHttpInfo
     *
     * Update all fields of a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        $request = $this->fullUpdateRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RuleComponent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RuleComponent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RuleComponent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RuleComponent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateRuleComponentAsync
     *
     * Update all fields of a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateRuleComponentAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        return $this->fullUpdateRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateRuleComponentAsyncWithHttpInfo
     *
     * Update all fields of a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\RuleComponent';
        $request = $this->fullUpdateRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateRuleComponent'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling fullUpdateRuleComponent'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateRuleComponent'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateRuleComponent'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateRuleComponent'
            );
        }
        // verify the required parameter 'rule_pk' is set
        if ($rule_pk === null || (is_array($rule_pk) && count($rule_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling fullUpdateRuleComponent'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling fullUpdateRuleComponent'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateRuleComponent'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'rule_pk' . '}',
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateRuleset
     *
     * Update all fields of a Ruleset
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function fullUpdateRuleset($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->fullUpdateRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateRulesetWithHttpInfo
     *
     * Update all fields of a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->fullUpdateRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ruleset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ruleset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ruleset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ruleset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateRulesetAsync
     *
     * Update all fields of a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateRulesetAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        return $this->fullUpdateRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateRulesetAsyncWithHttpInfo
     *
     * Update all fields of a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Ruleset';
        $request = $this->fullUpdateRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateRuleset'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling fullUpdateRuleset'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateRuleset'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateRuleset'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateRuleset'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateRuleset'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChecker
     *
     * Retrieve a checker of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function getChecker($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getCheckerWithHttpInfo
     *
     * Retrieve a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcChecker' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcChecker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcChecker';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcChecker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerAsync
     *
     * Retrieve a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckerAsyncWithHttpInfo
     *
     * Retrieve a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\IfcChecker';
        $request = $this->getCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChecker'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getChecker'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getChecker'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getChecker'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getChecker'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerResult
     *
     * Retrieve one CheckerResult
     *
     * @param  string $checker_pk checker_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function getCheckerResult($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getCheckerResultWithHttpInfo
     *
     * Retrieve one CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckerResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckerResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckerResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerResultAsync
     *
     * Retrieve one CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultAsync($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckerResultAsyncWithHttpInfo
     *
     * Retrieve one CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\CheckerResult';
        $request = $this->getCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerResult'
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'checker_pk' is set
        if ($checker_pk === null || (is_array($checker_pk) && count($checker_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling getCheckerResult'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerResult'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckerResult'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckerResult'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerResult'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'checker_pk' . '}',
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerResults
     *
     * Retrieve all CheckerResults
     *
     * @param  string $checker_pk checker_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult[]
     */
    public function getCheckerResults($checker_pk, $cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getCheckerResultsWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getCheckerResultsWithHttpInfo
     *
     * Retrieve all CheckerResults
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckerResultsWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getCheckerResultsRequest($checker_pk, $cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckerResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckerResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckerResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckerResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerResultsAsync
     *
     * Retrieve all CheckerResults
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultsAsync($checker_pk, $cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getCheckerResultsAsyncWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckerResultsAsyncWithHttpInfo
     *
     * Retrieve all CheckerResults
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultsAsyncWithHttpInfo($checker_pk, $cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\CheckerResult[]';
        $request = $this->getCheckerResultsRequest($checker_pk, $cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerResults'
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckerResultsRequest($checker_pk, $cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'checker_pk' is set
        if ($checker_pk === null || (is_array($checker_pk) && count($checker_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling getCheckerResults'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerResults'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckerResults'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerResults'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'checker_pk' . '}',
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckers
     *
     * Retrieve all checkers of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker[]
     */
    public function getCheckers($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getCheckersWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getCheckersWithHttpInfo
     *
     * Retrieve all checkers of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckersWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getCheckersRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcChecker[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcChecker[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcChecker[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcChecker[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckersAsync
     *
     * Retrieve all checkers of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckersAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getCheckersAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckersAsyncWithHttpInfo
     *
     * Retrieve all checkers of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckersAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\IfcChecker[]';
        $request = $this->getCheckersRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckers'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckersRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckers'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckers'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckers'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckplan
     *
     * Retrieve one Checkplan
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function getCheckplan($cloud_pk, $id, $project_pk)
    {
        list($response) = $this->getCheckplanWithHttpInfo($cloud_pk, $id, $project_pk);
        return $response;
    }

    /**
     * Operation getCheckplanWithHttpInfo
     *
     * Retrieve one Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckplanWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getCheckplanRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckPlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckPlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckPlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckPlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckplanAsync
     *
     * Retrieve one Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplanAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckplanAsyncWithHttpInfo
     *
     * Retrieve one Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\CheckPlan';
        $request = $this->getCheckplanRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckplan'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckplanRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckplan'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckplan'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckplan'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckplans
     *
     * Retrieve all Checkplans
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan[]
     */
    public function getCheckplans($cloud_pk, $project_pk)
    {
        list($response) = $this->getCheckplansWithHttpInfo($cloud_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getCheckplansWithHttpInfo
     *
     * Retrieve all Checkplans
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckplansWithHttpInfo($cloud_pk, $project_pk)
    {
        $request = $this->getCheckplansRequest($cloud_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckPlan[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckPlan[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckPlan[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckPlan[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckplansAsync
     *
     * Retrieve all Checkplans
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplansAsync($cloud_pk, $project_pk)
    {
        return $this->getCheckplansAsyncWithHttpInfo($cloud_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckplansAsyncWithHttpInfo
     *
     * Retrieve all Checkplans
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplansAsyncWithHttpInfo($cloud_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\CheckPlan[]';
        $request = $this->getCheckplansRequest($cloud_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckplans'
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckplansRequest($cloud_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckplans'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckplans'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRule
     *
     * Retrieve one Rule
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function getRule($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        list($response) = $this->getRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk);
        return $response;
    }

    /**
     * Operation getRuleWithHttpInfo
     *
     * Retrieve one Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        $request = $this->getRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Rule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRuleAsync
     *
     * Retrieve one Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        return $this->getRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRuleAsyncWithHttpInfo
     *
     * Retrieve one Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Rule';
        $request = $this->getRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRule'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRule'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRule'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRule'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRule'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRule'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRuleComponent
     *
     * Retrieve one RuleComponent
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $rule_pk rule_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function getRuleComponent($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        list($response) = $this->getRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk);
        return $response;
    }

    /**
     * Operation getRuleComponentWithHttpInfo
     *
     * Retrieve one RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        $request = $this->getRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RuleComponent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RuleComponent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RuleComponent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RuleComponent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRuleComponentAsync
     *
     * Retrieve one RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        return $this->getRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRuleComponentAsyncWithHttpInfo
     *
     * Retrieve one RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\RuleComponent';
        $request = $this->getRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRuleComponent'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRuleComponent'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRuleComponent'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRuleComponent'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRuleComponent'
            );
        }
        // verify the required parameter 'rule_pk' is set
        if ($rule_pk === null || (is_array($rule_pk) && count($rule_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling getRuleComponent'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRuleComponent'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'rule_pk' . '}',
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRuleComponents
     *
     * Retrieve all RuleComponents
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $rule_pk rule_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent[]
     */
    public function getRuleComponents($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk)
    {
        list($response) = $this->getRuleComponentsWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk);
        return $response;
    }

    /**
     * Operation getRuleComponentsWithHttpInfo
     *
     * Retrieve all RuleComponents
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleComponentsWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk)
    {
        $request = $this->getRuleComponentsRequest($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RuleComponent[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RuleComponent[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RuleComponent[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RuleComponent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRuleComponentsAsync
     *
     * Retrieve all RuleComponents
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentsAsync($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk)
    {
        return $this->getRuleComponentsAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRuleComponentsAsyncWithHttpInfo
     *
     * Retrieve all RuleComponents
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentsAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\RuleComponent[]';
        $request = $this->getRuleComponentsRequest($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRuleComponents'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRuleComponentsRequest($check_plan_pk, $cloud_pk, $project_pk, $rule_pk, $ruleset_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRuleComponents'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRuleComponents'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRuleComponents'
            );
        }
        // verify the required parameter 'rule_pk' is set
        if ($rule_pk === null || (is_array($rule_pk) && count($rule_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling getRuleComponents'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRuleComponents'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'rule_pk' . '}',
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRules
     *
     * Retrieve all Rules
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule[]
     */
    public function getRules($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk)
    {
        list($response) = $this->getRulesWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk);
        return $response;
    }

    /**
     * Operation getRulesWithHttpInfo
     *
     * Retrieve all Rules
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk)
    {
        $request = $this->getRulesRequest($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Rule[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rule[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rule[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRulesAsync
     *
     * Retrieve all Rules
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesAsync($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk)
    {
        return $this->getRulesAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRulesAsyncWithHttpInfo
     *
     * Retrieve all Rules
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Rule[]';
        $request = $this->getRulesRequest($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRules'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRulesRequest($check_plan_pk, $cloud_pk, $project_pk, $ruleset_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRules'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRules'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRules'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRules'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRuleset
     *
     * Retrieve one Ruleset
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function getRuleset($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        list($response) = $this->getRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk);
        return $response;
    }

    /**
     * Operation getRulesetWithHttpInfo
     *
     * Retrieve one Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        $request = $this->getRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ruleset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ruleset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ruleset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ruleset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRulesetAsync
     *
     * Retrieve one Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetAsync($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        return $this->getRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRulesetAsyncWithHttpInfo
     *
     * Retrieve one Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Ruleset';
        $request = $this->getRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRuleset'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRuleset'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRuleset'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRuleset'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRuleset'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRulesets
     *
     * Retrieve all Rulesets
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset[]
     */
    public function getRulesets($check_plan_pk, $cloud_pk, $project_pk)
    {
        list($response) = $this->getRulesetsWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getRulesetsWithHttpInfo
     *
     * Retrieve all Rulesets
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesetsWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk)
    {
        $request = $this->getRulesetsRequest($check_plan_pk, $cloud_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ruleset[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ruleset[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ruleset[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ruleset[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRulesetsAsync
     *
     * Retrieve all Rulesets
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetsAsync($check_plan_pk, $cloud_pk, $project_pk)
    {
        return $this->getRulesetsAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRulesetsAsyncWithHttpInfo
     *
     * Retrieve all Rulesets
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetsAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Ruleset[]';
        $request = $this->getRulesetsRequest($check_plan_pk, $cloud_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRulesets'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRulesetsRequest($check_plan_pk, $cloud_pk, $project_pk)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRulesets'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRulesets'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRulesets'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation launchNewCheck
     *
     * Launch a new check on the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function launchNewCheck($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $this->launchNewCheckWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
    }

    /**
     * Operation launchNewCheckWithHttpInfo
     *
     * Launch a new check on the model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function launchNewCheckWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->launchNewCheckRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation launchNewCheckAsync
     *
     * Launch a new check on the model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function launchNewCheckAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->launchNewCheckAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation launchNewCheckAsyncWithHttpInfo
     *
     * Launch a new check on the model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function launchNewCheckAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '';
        $request = $this->launchNewCheckRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'launchNewCheck'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function launchNewCheckRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling launchNewCheck'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling launchNewCheck'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling launchNewCheck'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling launchNewCheck'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling launchNewCheck'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChecker
     *
     * Update some fields of a checker of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function updateChecker($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateCheckerWithHttpInfo
     *
     * Update some fields of a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCheckerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcChecker' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcChecker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcChecker';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcChecker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckerAsync
     *
     * Update some fields of a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCheckerAsyncWithHttpInfo
     *
     * Update some fields of a checker of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcChecker';
        $request = $this->updateCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChecker'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcChecker $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCheckerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateChecker'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateChecker'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateChecker'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateChecker'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateChecker'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCheckerResult
     *
     * Update some fields of a CheckerResult
     *
     * @param  string $checker_pk checker_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function updateCheckerResult($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateCheckerResultWithHttpInfo
     *
     * Update some fields of a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCheckerResultWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckerResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckerResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckerResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckerResultAsync
     *
     * Update some fields of a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerResultAsync($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCheckerResultAsyncWithHttpInfo
     *
     * Update some fields of a CheckerResult
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerResultAsyncWithHttpInfo($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\CheckerResult';
        $request = $this->updateCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCheckerResult'
     *
     * @param  string $checker_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckerResult $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCheckerResultRequest($checker_pk, $cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'checker_pk' is set
        if ($checker_pk === null || (is_array($checker_pk) && count($checker_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling updateCheckerResult'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCheckerResult'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCheckerResult'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateCheckerResult'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateCheckerResult'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateCheckerResult'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'checker_pk' . '}',
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCheckplan
     *
     * Update some fields of a Checkplan
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function updateCheckplan($cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->updateCheckplanWithHttpInfo($cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateCheckplanWithHttpInfo
     *
     * Update some fields of a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCheckplanWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->updateCheckplanRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CheckPlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CheckPlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CheckPlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CheckPlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckplanAsync
     *
     * Update some fields of a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckplanAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->updateCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCheckplanAsyncWithHttpInfo
     *
     * Update some fields of a Checkplan
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckplanAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\CheckPlan';
        $request = $this->updateCheckplanRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCheckplan'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\CheckPlan $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCheckplanRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCheckplan'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCheckplan'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateCheckplan'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateCheckplan'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRule
     *
     * Update some fields of a Rule
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function updateRule($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        list($response) = $this->updateRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data);
        return $response;
    }

    /**
     * Operation updateRuleWithHttpInfo
     *
     * Update some fields of a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRuleWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        $request = $this->updateRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Rule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRuleAsync
     *
     * Update some fields of a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        return $this->updateRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRuleAsyncWithHttpInfo
     *
     * Update some fields of a Rule
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Rule';
        $request = $this->updateRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRule'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  string $project_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\Rule $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRuleRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $ruleset_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling updateRule'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateRule'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateRule'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateRule'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling updateRule'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateRule'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRuleComponent
     *
     * Update some fields of a RuleComponent
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $rule_pk rule_pk (required)
     * @param  string $ruleset_pk ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function updateRuleComponent($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        list($response) = $this->updateRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data);
        return $response;
    }

    /**
     * Operation updateRuleComponentWithHttpInfo
     *
     * Update some fields of a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRuleComponentWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        $request = $this->updateRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RuleComponent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RuleComponent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RuleComponent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RuleComponent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRuleComponentAsync
     *
     * Update some fields of a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleComponentAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        return $this->updateRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRuleComponentAsyncWithHttpInfo
     *
     * Update some fields of a RuleComponent
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleComponentAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\RuleComponent';
        $request = $this->updateRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRuleComponent'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  string $project_pk (required)
     * @param  string $rule_pk (required)
     * @param  string $ruleset_pk (required)
     * @param  \OpenAPI\Client\Model\RuleComponent $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRuleComponentRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $rule_pk, $ruleset_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling updateRuleComponent'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateRuleComponent'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateRuleComponent'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateRuleComponent'
            );
        }
        // verify the required parameter 'rule_pk' is set
        if ($rule_pk === null || (is_array($rule_pk) && count($rule_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling updateRuleComponent'
            );
        }
        // verify the required parameter 'ruleset_pk' is set
        if ($ruleset_pk === null || (is_array($ruleset_pk) && count($ruleset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling updateRuleComponent'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateRuleComponent'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'rule_pk' . '}',
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ruleset_pk' . '}',
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRuleset
     *
     * Update some fields of a Ruleset
     *
     * @param  string $check_plan_pk check_plan_pk (required)
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function updateRuleset($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->updateRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateRulesetWithHttpInfo
     *
     * Update some fields of a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRulesetWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->updateRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ruleset' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ruleset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ruleset';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ruleset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRulesetAsync
     *
     * Update some fields of a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRulesetAsync($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        return $this->updateRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRulesetAsyncWithHttpInfo
     *
     * Update some fields of a Ruleset
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRulesetAsyncWithHttpInfo($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Ruleset';
        $request = $this->updateRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRuleset'
     *
     * @param  string $check_plan_pk (required)
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ruleset $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRulesetRequest($check_plan_pk, $cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'check_plan_pk' is set
        if ($check_plan_pk === null || (is_array($check_plan_pk) && count($check_plan_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling updateRuleset'
            );
        }
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateRuleset'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateRuleset'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateRuleset'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateRuleset'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'check_plan_pk' . '}',
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
