<?php
/**
 * IfcApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IfcApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IfcApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addIfcErrors
     *
     * Add errors to IFC
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcErrors $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcErrors
     */
    public function addIfcErrors($cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->addIfcErrorsWithHttpInfo($cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation addIfcErrorsWithHttpInfo
     *
     * Add errors to IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcErrors $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcErrors, HTTP status code, HTTP response headers (array of strings)
     */
    public function addIfcErrorsWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->addIfcErrorsRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\IfcErrors' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcErrors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcErrors';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcErrors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addIfcErrorsAsync
     *
     * Add errors to IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcErrors $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addIfcErrorsAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->addIfcErrorsAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addIfcErrorsAsyncWithHttpInfo
     *
     * Add errors to IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcErrors $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addIfcErrorsAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcErrors';
        $request = $this->addIfcErrorsRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addIfcErrors'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcErrors $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addIfcErrorsRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling addIfcErrors'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addIfcErrors'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling addIfcErrors'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling addIfcErrors'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcClassifications
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteIfcClassifications($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->bulkDeleteIfcClassificationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkDeleteIfcClassificationsWithHttpInfo
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteIfcClassificationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->bulkDeleteIfcClassificationsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcClassificationsAsync
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcClassificationsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->bulkDeleteIfcClassificationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteIfcClassificationsAsyncWithHttpInfo
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcClassificationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkDeleteIfcClassificationsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcClassifications'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteIfcClassificationsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcClassifications'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcClassifications'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcClassifications'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcProperties
     *
     * Delete many Property of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteIfcProperties($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->bulkDeleteIfcPropertiesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkDeleteIfcPropertiesWithHttpInfo
     *
     * Delete many Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteIfcPropertiesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->bulkDeleteIfcPropertiesRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcPropertiesAsync
     *
     * Delete many Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcPropertiesAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->bulkDeleteIfcPropertiesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteIfcPropertiesAsyncWithHttpInfo
     *
     * Delete many Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcPropertiesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkDeleteIfcPropertiesRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcProperties'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteIfcPropertiesRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcProperties'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcProperties'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcProperties'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitions
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteIfcPropertyDefinitions($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->bulkDeleteIfcPropertyDefinitionsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsWithHttpInfo
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteIfcPropertyDefinitionsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->bulkDeleteIfcPropertyDefinitionsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsAsync
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcPropertyDefinitionsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->bulkDeleteIfcPropertyDefinitionsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsAsyncWithHttpInfo
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcPropertyDefinitionsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkDeleteIfcPropertyDefinitionsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcPropertyDefinitions'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteIfcPropertyDefinitionsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcPropertyDefinitions'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcPropertyDefinitions'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcPropertyDefinitions'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcUnits
     *
     * Delete many Units of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteIfcUnits($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->bulkDeleteIfcUnitsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkDeleteIfcUnitsWithHttpInfo
     *
     * Delete many Units of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteIfcUnitsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->bulkDeleteIfcUnitsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcUnitsAsync
     *
     * Delete many Units of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcUnitsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->bulkDeleteIfcUnitsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeleteIfcUnitsAsyncWithHttpInfo
     *
     * Delete many Units of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteIfcUnitsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkDeleteIfcUnitsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcUnits'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteIfcUnitsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcUnits'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcUnits'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcUnits'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeletePropertySet
     *
     * Delete many PropertySet of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeletePropertySet($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->bulkDeletePropertySetWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkDeletePropertySetWithHttpInfo
     *
     * Delete many PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeletePropertySetWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->bulkDeletePropertySetRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeletePropertySetAsync
     *
     * Delete many PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeletePropertySetAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->bulkDeletePropertySetAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkDeletePropertySetAsyncWithHttpInfo
     *
     * Delete many PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeletePropertySetAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkDeletePropertySetRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeletePropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeletePropertySetRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeletePropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeletePropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeletePropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkFullUpdateElements
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function bulkFullUpdateElements($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->bulkFullUpdateElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation bulkFullUpdateElementsWithHttpInfo
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkFullUpdateElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->bulkFullUpdateElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkFullUpdateElementsAsync
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateElementsAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->bulkFullUpdateElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkFullUpdateElementsAsyncWithHttpInfo
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Element[]';
        $request = $this->bulkFullUpdateElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkFullUpdateElements'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkFullUpdateElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkFullUpdateElements'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkFullUpdateElements'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkFullUpdateElements'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling bulkFullUpdateElements'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkFullUpdateIfcProperty
     *
     * Update some fields of many properties of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function bulkFullUpdateIfcProperty($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->bulkFullUpdateIfcPropertyWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation bulkFullUpdateIfcPropertyWithHttpInfo
     *
     * Update some fields of many properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkFullUpdateIfcPropertyWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->bulkFullUpdateIfcPropertyRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkFullUpdateIfcPropertyAsync
     *
     * Update some fields of many properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateIfcPropertyAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->bulkFullUpdateIfcPropertyAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkFullUpdateIfcPropertyAsyncWithHttpInfo
     *
     * Update some fields of many properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateIfcPropertyAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property[]';
        $request = $this->bulkFullUpdateIfcPropertyRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkFullUpdateIfcProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkFullUpdateIfcPropertyRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkFullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkFullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkFullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling bulkFullUpdateIfcProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveClassificationsOfElement
     *
     * Remove many classifications from an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkRemoveClassificationsOfElement($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $this->bulkRemoveClassificationsOfElementWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkRemoveClassificationsOfElementWithHttpInfo
     *
     * Remove many classifications from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkRemoveClassificationsOfElementWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $request = $this->bulkRemoveClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveClassificationsOfElementAsync
     *
     * Remove many classifications from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveClassificationsOfElementAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        return $this->bulkRemoveClassificationsOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkRemoveClassificationsOfElementAsyncWithHttpInfo
     *
     * Remove many classifications from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveClassificationsOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkRemoveClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveClassificationsOfElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkRemoveClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveClassificationsOfElement'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling bulkRemoveClassificationsOfElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkRemoveClassificationsOfElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveClassificationsOfElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveElementsFromClassification
     *
     * Remove the classifications from all elements
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_classification_pk ifc_classification_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkRemoveElementsFromClassification($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        $this->bulkRemoveElementsFromClassificationWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation bulkRemoveElementsFromClassificationWithHttpInfo
     *
     * Remove the classifications from all elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkRemoveElementsFromClassificationWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        $request = $this->bulkRemoveElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveElementsFromClassificationAsync
     *
     * Remove the classifications from all elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveElementsFromClassificationAsync($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        return $this->bulkRemoveElementsFromClassificationAsyncWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkRemoveElementsFromClassificationAsyncWithHttpInfo
     *
     * Remove the classifications from all elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveElementsFromClassificationAsyncWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->bulkRemoveElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveElementsFromClassification'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkRemoveElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveElementsFromClassification'
            );
        }
        // verify the required parameter 'ifc_classification_pk' is set
        if ($ifc_classification_pk === null || (is_array($ifc_classification_pk) && count($ifc_classification_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_classification_pk when calling bulkRemoveElementsFromClassification'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkRemoveElementsFromClassification'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveElementsFromClassification'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/bulk_destroy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_classification_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_classification_pk' . '}',
                ObjectSerializer::toPathValue($ifc_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateElements
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function bulkUpdateElements($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->bulkUpdateElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation bulkUpdateElementsWithHttpInfo
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->bulkUpdateElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateElementsAsync
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateElementsAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->bulkUpdateElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateElementsAsyncWithHttpInfo
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Element[]';
        $request = $this->bulkUpdateElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateElements'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkUpdateElements'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkUpdateElements'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkUpdateElements'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling bulkUpdateElements'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateIfcProperty
     *
     * Update all fields of many properties of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function bulkUpdateIfcProperty($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->bulkUpdateIfcPropertyWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation bulkUpdateIfcPropertyWithHttpInfo
     *
     * Update all fields of many properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateIfcPropertyWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->bulkUpdateIfcPropertyRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateIfcPropertyAsync
     *
     * Update all fields of many properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateIfcPropertyAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->bulkUpdateIfcPropertyAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateIfcPropertyAsyncWithHttpInfo
     *
     * Update all fields of many properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateIfcPropertyAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property[]';
        $request = $this->bulkUpdateIfcPropertyRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateIfcProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateIfcPropertyRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkUpdateIfcProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkUpdateIfcProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkUpdateIfcProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling bulkUpdateIfcProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccessToken
     *
     * Create a token for this model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function createAccessToken($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createAccessTokenWithHttpInfo
     *
     * Create a token for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\IfcAccessToken' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcAccessToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcAccessToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccessTokenAsync
     *
     * Create a token for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccessTokenAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccessTokenAsyncWithHttpInfo
     *
     * Create a token for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
        $request = $this->createAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccessToken'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createAccessToken'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createAccessToken'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createAccessToken'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createAccessToken'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassificationElementRelations
     *
     * Create association between existing classification and existing element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createClassificationElementRelations($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->createClassificationElementRelationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation createClassificationElementRelationsWithHttpInfo
     *
     * Create association between existing classification and existing element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClassificationElementRelationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->createClassificationElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationElementRelationsAsync
     *
     * Create association between existing classification and existing element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationElementRelationsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->createClassificationElementRelationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createClassificationElementRelationsAsyncWithHttpInfo
     *
     * Create association between existing classification and existing element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationElementRelationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->createClassificationElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassificationElementRelations'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClassificationElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassificationElementRelations'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createClassificationElementRelations'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassificationElementRelations'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassificationsOfElement
     *
     * Create one or many classifications to an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Classification[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function createClassificationsOfElement($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createClassificationsOfElementWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createClassificationsOfElementWithHttpInfo
     *
     * Create one or many classifications to an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Classification[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createClassificationsOfElementWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Classification[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Classification[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Classification[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Classification[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationsOfElementAsync
     *
     * Create one or many classifications to an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Classification[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationsOfElementAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        return $this->createClassificationsOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createClassificationsOfElementAsyncWithHttpInfo
     *
     * Create one or many classifications to an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Classification[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationsOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Classification[]';
        $request = $this->createClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassificationsOfElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Classification[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassificationsOfElement'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createClassificationsOfElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createClassificationsOfElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassificationsOfElement'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createClassificationsOfElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElement
     *
     * Create an element in the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function createElement($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createElementWithHttpInfo
     *
     * Create an element in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createElementRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementAsync
     *
     * Create an element in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createElementAsyncWithHttpInfo
     *
     * Create an element in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Element[]';
        $request = $this->createElementRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Element[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElement'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySet
     *
     * Create a PropertySets to an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function createElementPropertySet($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createElementPropertySetWithHttpInfo
     *
     * Create a PropertySets to an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createElementPropertySetRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PropertySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetAsync
     *
     * Create a PropertySets to an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        return $this->createElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createElementPropertySetAsyncWithHttpInfo
     *
     * Create a PropertySets to an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet';
        $request = $this->createElementPropertySetRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySet'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySet'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createElementPropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetProperty
     *
     * Create a property to a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function createElementPropertySetProperty($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        list($response) = $this->createElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data);
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyWithHttpInfo
     *
     * Create a property to a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        $request = $this->createElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyAsync
     *
     * Create a property to a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        return $this->createElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Create a property to a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->createElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetProperty'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetProperty'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createElementPropertySetProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDefinition
     *
     * Create a Definition to a Property
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function createElementPropertySetPropertyDefinition($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data)
    {
        list($response) = $this->createElementPropertySetPropertyDefinitionWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data);
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionWithHttpInfo
     *
     * Create a Definition to a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetPropertyDefinitionWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data)
    {
        $request = $this->createElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PropertyDefinition' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionAsync
     *
     * Create a Definition to a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data)
    {
        return $this->createElementPropertySetPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionAsyncWithHttpInfo
     *
     * Create a Definition to a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
        $request = $this->createElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling createElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createElementPropertySetPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnit
     *
     * Create a Unit to a Definition
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertydefinition_pk propertydefinition_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function createElementPropertySetPropertyDefinitionUnit($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data)
    {
        list($response) = $this->createElementPropertySetPropertyDefinitionUnitWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data);
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitWithHttpInfo
     *
     * Create a Unit to a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetPropertyDefinitionUnitWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data)
    {
        $request = $this->createElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Unit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitAsync
     *
     * Create a Unit to a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionUnitAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data)
    {
        return $this->createElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo
     *
     * Create a Unit to a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Unit';
        $request = $this->createElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDefinitionUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'propertydefinition_pk' is set
        if ($propertydefinition_pk === null || (is_array($propertydefinition_pk) && count($propertydefinition_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertydefinition_pk' . '}',
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIfcPropertyDefinition
     *
     * Create a PropertyDefinition on the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     */
    public function createIfcPropertyDefinition($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createIfcPropertyDefinitionWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createIfcPropertyDefinitionWithHttpInfo
     *
     * Create a PropertyDefinition on the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createIfcPropertyDefinitionWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createIfcPropertyDefinitionRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIfcPropertyDefinitionAsync
     *
     * Create a PropertyDefinition on the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIfcPropertyDefinitionAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createIfcPropertyDefinitionAsyncWithHttpInfo
     *
     * Create a PropertyDefinition on the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition[]';
        $request = $this->createIfcPropertyDefinitionRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIfcPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createIfcPropertyDefinitionRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createIfcPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIfcUnit
     *
     * Create a Unit on a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     */
    public function createIfcUnit($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createIfcUnitWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createIfcUnitWithHttpInfo
     *
     * Create a Unit on a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createIfcUnitWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createIfcUnitRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIfcUnitAsync
     *
     * Create a Unit on a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIfcUnitAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createIfcUnitAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createIfcUnitAsyncWithHttpInfo
     *
     * Create a Unit on a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIfcUnitAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Unit[]';
        $request = $this->createIfcUnitRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIfcUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createIfcUnitRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createIfcUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createIfcUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createIfcUnit'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createIfcUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLayer
     *
     * Create a layer in the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function createLayer($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createLayerWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createLayerWithHttpInfo
     *
     * Create a layer in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLayerWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createLayerRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Layer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Layer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Layer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Layer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLayerAsync
     *
     * Create a layer in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLayerAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createLayerAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLayerAsyncWithHttpInfo
     *
     * Create a layer in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLayerAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Layer';
        $request = $this->createLayerRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLayer'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLayerRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createLayer'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createLayer'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createLayer'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createLayer'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertySet
     *
     * Create a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     */
    public function createPropertySet($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createPropertySetWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createPropertySetWithHttpInfo
     *
     * Create a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createPropertySetWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createPropertySetRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertySetAsync
     *
     * Create a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createPropertySetAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPropertySetAsyncWithHttpInfo
     *
     * Create a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet[]';
        $request = $this->createPropertySetRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPropertySetRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createPropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createPropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createPropertySet'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createPropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertySetElementRelations
     *
     * Create association between PropertySet and element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPropertySetElementRelations($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->createPropertySetElementRelationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation createPropertySetElementRelationsWithHttpInfo
     *
     * Create association between PropertySet and element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPropertySetElementRelationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->createPropertySetElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertySetElementRelationsAsync
     *
     * Create association between PropertySet and element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetElementRelationsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->createPropertySetElementRelationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPropertySetElementRelationsAsyncWithHttpInfo
     *
     * Create association between PropertySet and element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetElementRelationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->createPropertySetElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertySetElementRelations'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPropertySetElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createPropertySetElementRelations'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createPropertySetElementRelations'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createPropertySetElementRelations'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRawElements
     *
     * Create elements in an optimized format
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\RawElements $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createRawElements($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $this->createRawElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
    }

    /**
     * Operation createRawElementsWithHttpInfo
     *
     * Create elements in an optimized format
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\RawElements $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRawElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createRawElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createRawElementsAsync
     *
     * Create elements in an optimized format
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\RawElements $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRawElementsAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createRawElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRawElementsAsyncWithHttpInfo
     *
     * Create elements in an optimized format
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\RawElements $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRawElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '';
        $request = $this->createRawElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRawElements'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\RawElements $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRawElementsRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRawElements'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createRawElements'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRawElements'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createRawElements'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSpace
     *
     * Create a space in the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Space[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space[]
     */
    public function createSpace($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createSpaceWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createSpaceWithHttpInfo
     *
     * Create a space in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createSpaceWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createSpaceRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Space[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Space[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Space[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Space[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSpaceAsync
     *
     * Create a space in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpaceAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createSpaceAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSpaceAsyncWithHttpInfo
     *
     * Create a space in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpaceAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Space[]';
        $request = $this->createSpaceRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSpaceRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createSpace'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSystem
     *
     * Create a system in the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\System $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function createSystem($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createSystemWithHttpInfo
     *
     * Create a system in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createSystemRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\System' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\System', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\System';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\System',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSystemAsync
     *
     * Create a system in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSystemAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSystemAsyncWithHttpInfo
     *
     * Create a system in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\System';
        $request = $this->createSystemRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSystem'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSystemRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createSystem'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createSystem'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createSystem'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createSystem'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZone
     *
     * Create a zone in the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone[] $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone[]
     */
    public function createZone($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->createZoneWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation createZoneWithHttpInfo
     *
     * Create a zone in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone[] $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createZoneWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $request = $this->createZoneRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Zone[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Zone[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Zone[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Zone[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneAsync
     *
     * Create a zone in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneAsync($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        return $this->createZoneAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createZoneAsyncWithHttpInfo
     *
     * Create a zone in the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Zone[]';
        $request = $this->createZoneRequest($cloud_pk, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZone'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone[] $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createZoneRequest($cloud_pk, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createZone'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createZone'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createZone'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createZone'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZoneSpace
     *
     * Create a space in a zone
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $zone_pk zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function createZoneSpace($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        list($response) = $this->createZoneSpaceWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data);
        return $response;
    }

    /**
     * Operation createZoneSpaceWithHttpInfo
     *
     * Create a space in a zone
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function createZoneSpaceWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        $request = $this->createZoneSpaceRequest($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ZoneSpace' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ZoneSpace', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ZoneSpace';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ZoneSpace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneSpaceAsync
     *
     * Create a space in a zone
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneSpaceAsync($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        return $this->createZoneSpaceAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createZoneSpaceAsyncWithHttpInfo
     *
     * Create a space in a zone
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneSpaceAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\ZoneSpace';
        $request = $this->createZoneSpaceRequest($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZoneSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createZoneSpaceRequest($cloud_pk, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createZoneSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createZoneSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createZoneSpace'
            );
        }
        // verify the required parameter 'zone_pk' is set
        if ($zone_pk === null || (is_array($zone_pk) && count($zone_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling createZoneSpace'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling createZoneSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_pk' . '}',
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccessToken
     *
     * Delete a token
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $token token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccessToken($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        $this->deleteAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token);
    }

    /**
     * Operation deleteAccessTokenWithHttpInfo
     *
     * Delete a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        $request = $this->deleteAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccessTokenAsync
     *
     * Delete a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccessTokenAsync($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        return $this->deleteAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccessTokenAsyncWithHttpInfo
     *
     * Delete a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        $returnType = '';
        $request = $this->deleteAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccessToken'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteAccessToken'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteAccessToken'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteAccessToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteAccessToken'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteElement
     *
     * Delete an element of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteElement($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $this->deleteElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid);
    }

    /**
     * Operation deleteElementWithHttpInfo
     *
     * Delete an element of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $request = $this->deleteElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteElementAsync
     *
     * Delete an element of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteElementAsync($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        return $this->deleteElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteElementAsyncWithHttpInfo
     *
     * Delete an element of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $returnType = '';
        $request = $this->deleteElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteElement'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfc
     *
     * Delete a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIfc($cloud_pk, $id, $project_pk)
    {
        $this->deleteIfcWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation deleteIfcWithHttpInfo
     *
     * Delete a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIfcWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->deleteIfcRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcAsync
     *
     * Delete a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcAsync($cloud_pk, $id, $project_pk)
    {
        return $this->deleteIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIfcAsyncWithHttpInfo
     *
     * Delete a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteIfcRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIfcRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcProperty
     *
     * Delete a Property of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIfcProperty($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteIfcPropertyWithHttpInfo
     *
     * Delete a Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcPropertyAsync
     *
     * Delete a Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcPropertyAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIfcPropertyAsyncWithHttpInfo
     *
     * Delete a Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteIfcProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcPropertyDefinition
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIfcPropertyDefinition($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteIfcPropertyDefinitionWithHttpInfo
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcPropertyDefinitionAsync
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcPropertyDefinitionAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIfcPropertyDefinitionAsyncWithHttpInfo
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcUnit
     *
     * Delete a Unit of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIfcUnit($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteIfcUnitWithHttpInfo
     *
     * Delete a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcUnitAsync
     *
     * Delete a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcUnitAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIfcUnitAsyncWithHttpInfo
     *
     * Delete a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcUnit'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteIfcUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLayer
     *
     * Delete a layer of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLayer($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteLayerWithHttpInfo
     *
     * Delete a layer of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLayerAsync
     *
     * Delete a layer of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLayerAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLayerAsyncWithHttpInfo
     *
     * Delete a layer of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLayer'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteLayer'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLayer'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteLayer'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteLayer'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePropertySet
     *
     * Delete a PropertySet of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePropertySet($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deletePropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deletePropertySetWithHttpInfo
     *
     * Delete a PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deletePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePropertySetAsync
     *
     * Delete a PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePropertySetAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deletePropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePropertySetAsyncWithHttpInfo
     *
     * Delete a PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deletePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deletePropertySet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deletePropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deletePropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpace
     *
     * Delete a space
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSpace($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteSpaceWithHttpInfo
     *
     * Delete a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSpaceAsync
     *
     * Delete a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSpaceAsyncWithHttpInfo
     *
     * Delete a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSystem
     *
     * Delete a system of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSystem($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $this->deleteSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid);
    }

    /**
     * Operation deleteSystemWithHttpInfo
     *
     * Delete a system of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $request = $this->deleteSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSystemAsync
     *
     * Delete a system of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSystemAsync($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        return $this->deleteSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSystemAsyncWithHttpInfo
     *
     * Delete a system of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $returnType = '';
        $request = $this->deleteSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSystem'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteSystem'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteSystem'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteSystem'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteSystem'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZone
     *
     * Delete a zone of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteZone($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $this->deleteZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation deleteZoneWithHttpInfo
     *
     * Delete a zone of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->deleteZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneAsync
     *
     * Delete a zone of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->deleteZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteZoneAsyncWithHttpInfo
     *
     * Delete a zone of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->deleteZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZone'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteZone'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteZone'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteZone'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteZone'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZoneSpace
     *
     * Delete a space of a zone
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $zone_pk zone_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteZoneSpace($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        $this->deleteZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk);
    }

    /**
     * Operation deleteZoneSpaceWithHttpInfo
     *
     * Delete a space of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        $request = $this->deleteZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneSpaceAsync
     *
     * Delete a space of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        return $this->deleteZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteZoneSpaceAsyncWithHttpInfo
     *
     * Delete a space of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        $returnType = '';
        $request = $this->deleteZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZoneSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteZoneSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteZoneSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteZoneSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteZoneSpace'
            );
        }
        // verify the required parameter 'zone_pk' is set
        if ($zone_pk === null || (is_array($zone_pk) && count($zone_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling deleteZoneSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_pk' . '}',
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportIfc
     *
     * Export IFC
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExport $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcExport
     */
    public function exportIfc($cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->exportIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation exportIfcWithHttpInfo
     *
     * Export IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExport $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcExport, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->exportIfcRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\IfcExport' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcExport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcExport';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcExport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportIfcAsync
     *
     * Export IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExport $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportIfcAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->exportIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportIfcAsyncWithHttpInfo
     *
     * Export IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExport $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcExport';
        $request = $this->exportIfcRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExport $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportIfcRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling exportIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling exportIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling exportIfc'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling exportIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateAccessToken
     *
     * Update all fields of a token
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $token token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function fullUpdateAccessToken($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        list($response) = $this->fullUpdateAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data);
        return $response;
    }

    /**
     * Operation fullUpdateAccessTokenWithHttpInfo
     *
     * Update all fields of a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        $request = $this->fullUpdateAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcAccessToken' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcAccessToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcAccessToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateAccessTokenAsync
     *
     * Update all fields of a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateAccessTokenAsync($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        return $this->fullUpdateAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateAccessTokenAsyncWithHttpInfo
     *
     * Update all fields of a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
        $request = $this->fullUpdateAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateAccessToken'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateAccessToken'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateAccessToken'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateAccessToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling fullUpdateAccessToken'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateAccessToken'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateElement
     *
     * Update all fields of an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     */
    public function fullUpdateElement($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        list($response) = $this->fullUpdateElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);
        return $response;
    }

    /**
     * Operation fullUpdateElementWithHttpInfo
     *
     * Update all fields of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $request = $this->fullUpdateElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateElementAsync
     *
     * Update all fields of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateElementAsync($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        return $this->fullUpdateElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateElementAsyncWithHttpInfo
     *
     * Update all fields of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Element';
        $request = $this->fullUpdateElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateElement'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling fullUpdateElement'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateElementPropertySetProperty
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function fullUpdateElementPropertySetProperty($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        list($response) = $this->fullUpdateElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateElementPropertySetPropertyWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        $request = $this->fullUpdateElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateElementPropertySetPropertyAsync
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateElementPropertySetPropertyAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        return $this->fullUpdateElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->fullUpdateElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateElementPropertySetProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling fullUpdateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling fullUpdateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateElementPropertySetProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateIfc
     *
     * Update all fields of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ifc
     */
    public function fullUpdateIfc($cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->fullUpdateIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateIfcWithHttpInfo
     *
     * Update all fields of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ifc, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->fullUpdateIfcRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ifc' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ifc', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ifc';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ifc',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateIfcAsync
     *
     * Update all fields of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->fullUpdateIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateIfcAsyncWithHttpInfo
     *
     * Update all fields of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Ifc';
        $request = $this->fullUpdateIfcRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateIfcRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateIfc'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateIfcProperty
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function fullUpdateIfcProperty($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateIfcPropertyWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateIfcPropertyAsync
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcPropertyAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateIfcPropertyAsyncWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->fullUpdateIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateIfcProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateIfcProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateIfcProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateIfcPropertyDefinition
     *
     * Update all fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function fullUpdateIfcPropertyDefinition($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateIfcPropertyDefinitionWithHttpInfo
     *
     * Update all fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateIfcPropertyDefinitionAsync
     *
     * Update all fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcPropertyDefinitionAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateIfcPropertyDefinitionAsyncWithHttpInfo
     *
     * Update all fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
        $request = $this->fullUpdateIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateIfcPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateIfcPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateIfcUnit
     *
     * Update all fields of a Unit of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function fullUpdateIfcUnit($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateIfcUnitWithHttpInfo
     *
     * Update all fields of a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateIfcUnitAsync
     *
     * Update all fields of a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcUnitAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateIfcUnitAsyncWithHttpInfo
     *
     * Update all fields of a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Unit';
        $request = $this->fullUpdateIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateIfcUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateIfcUnit'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateIfcUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateIfcUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateIfcUnit'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateIfcUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateLayer
     *
     * Update all fields of a layer
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function fullUpdateLayer($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateLayerWithHttpInfo
     *
     * Update all fields of a layer
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Layer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Layer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Layer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Layer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateLayerAsync
     *
     * Update all fields of a layer
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateLayerAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateLayerAsyncWithHttpInfo
     *
     * Update all fields of a layer
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Layer';
        $request = $this->fullUpdateLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateLayer'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateLayer'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateLayer'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateLayer'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateLayer'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateLayer'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateProcessorHandler
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     */
    public function fullUpdateProcessorHandler($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateProcessorHandlerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateProcessorHandlerWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateProcessorHandlerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProcessorHandler' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProcessorHandler', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProcessorHandler';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProcessorHandler',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateProcessorHandlerAsync
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateProcessorHandlerAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateProcessorHandlerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateProcessorHandlerAsyncWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateProcessorHandlerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\ProcessorHandler';
        $request = $this->fullUpdateProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateProcessorHandler'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateProcessorHandler'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateProcessorHandler'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateProcessorHandler'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateProcessorHandler'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateProcessorHandler'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdatePropertySet
     *
     * Update all fields of a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function fullUpdatePropertySet($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdatePropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdatePropertySetWithHttpInfo
     *
     * Update all fields of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdatePropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdatePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdatePropertySetAsync
     *
     * Update all fields of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdatePropertySetAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdatePropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdatePropertySetAsyncWithHttpInfo
     *
     * Update all fields of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdatePropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet';
        $request = $this->fullUpdatePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdatePropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdatePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdatePropertySet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdatePropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdatePropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdatePropertySet'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdatePropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateSpace
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     */
    public function fullUpdateSpace($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateSpaceWithHttpInfo
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Space' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Space', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Space';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Space',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateSpaceAsync
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateSpaceAsyncWithHttpInfo
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Space';
        $request = $this->fullUpdateSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateSpace'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateSystem
     *
     * Update all fields of a system
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function fullUpdateSystem($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        list($response) = $this->fullUpdateSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);
        return $response;
    }

    /**
     * Operation fullUpdateSystemWithHttpInfo
     *
     * Update all fields of a system
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $request = $this->fullUpdateSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\System' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\System', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\System';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\System',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateSystemAsync
     *
     * Update all fields of a system
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateSystemAsync($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        return $this->fullUpdateSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateSystemAsyncWithHttpInfo
     *
     * Update all fields of a system
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $returnType = '\OpenAPI\Client\Model\System';
        $request = $this->fullUpdateSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateSystem'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateSystem'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateSystem'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateSystem'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling fullUpdateSystem'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateSystem'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateZone
     *
     * Update all fields of a zone
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     */
    public function fullUpdateZone($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->fullUpdateZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateZoneWithHttpInfo
     *
     * Update all fields of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->fullUpdateZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Zone' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Zone', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Zone';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Zone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateZoneAsync
     *
     * Update all fields of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateZoneAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->fullUpdateZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateZoneAsyncWithHttpInfo
     *
     * Update all fields of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Zone';
        $request = $this->fullUpdateZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateZone'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateZone'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateZone'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateZone'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateZone'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateZone'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateZoneSpace
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $zone_pk zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function fullUpdateZoneSpace($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        list($response) = $this->fullUpdateZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data);
        return $response;
    }

    /**
     * Operation fullUpdateZoneSpaceWithHttpInfo
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        $request = $this->fullUpdateZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ZoneSpace' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ZoneSpace', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ZoneSpace';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ZoneSpace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateZoneSpaceAsync
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateZoneSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        return $this->fullUpdateZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullUpdateZoneSpaceAsyncWithHttpInfo
     *
     * Update all fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\ZoneSpace';
        $request = $this->fullUpdateZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateZoneSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateZoneSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fullUpdateZoneSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateZoneSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateZoneSpace'
            );
        }
        // verify the required parameter 'zone_pk' is set
        if ($zone_pk === null || (is_array($zone_pk) && count($zone_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling fullUpdateZoneSpace'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling fullUpdateZoneSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_pk' . '}',
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessToken
     *
     * Retrieve one token created for this model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $token token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function getAccessToken($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        list($response) = $this->getAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token);
        return $response;
    }

    /**
     * Operation getAccessTokenWithHttpInfo
     *
     * Retrieve one token created for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        $request = $this->getAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcAccessToken' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcAccessToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcAccessToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokenAsync
     *
     * Retrieve one token created for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokenAsync($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        return $this->getAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessTokenAsyncWithHttpInfo
     *
     * Retrieve one token created for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
        $request = $this->getAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessToken'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getAccessToken'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getAccessToken'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getAccessToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAccessToken'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessTokens
     *
     * Retrieve all tokens created for this model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken[]
     */
    public function getAccessTokens($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getAccessTokensWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getAccessTokensWithHttpInfo
     *
     * Retrieve all tokens created for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessTokensWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getAccessTokensRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcAccessToken[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcAccessToken[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcAccessToken[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcAccessToken[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokensAsync
     *
     * Retrieve all tokens created for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokensAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getAccessTokensAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessTokensAsyncWithHttpInfo
     *
     * Retrieve all tokens created for this model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokensAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\IfcAccessToken[]';
        $request = $this->getAccessTokensRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessTokens'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccessTokensRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getAccessTokens'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getAccessTokens'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getAccessTokens'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClassificationsOfElement
     *
     * Retrieve all classifications of an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function getClassificationsOfElement($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        list($response) = $this->getClassificationsOfElementWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getClassificationsOfElementWithHttpInfo
     *
     * Retrieve all classifications of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getClassificationsOfElementWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $request = $this->getClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Classification[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Classification[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Classification[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Classification[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClassificationsOfElementAsync
     *
     * Retrieve all classifications of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationsOfElementAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        return $this->getClassificationsOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClassificationsOfElementAsyncWithHttpInfo
     *
     * Retrieve all classifications of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationsOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Classification[]';
        $request = $this->getClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClassificationsOfElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClassificationsOfElementRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getClassificationsOfElement'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getClassificationsOfElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getClassificationsOfElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getClassificationsOfElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElement
     *
     * Retrieve an element of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     */
    public function getElement($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        list($response) = $this->getElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid);
        return $response;
    }

    /**
     * Operation getElementWithHttpInfo
     *
     * Retrieve an element of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $request = $this->getElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementAsync
     *
     * Retrieve an element of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementAsync($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        return $this->getElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementAsyncWithHttpInfo
     *
     * Retrieve an element of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $returnType = '\OpenAPI\Client\Model\Element';
        $request = $this->getElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElement'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySet
     *
     * Retrieve a PropertySet of an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function getElementPropertySet($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetWithHttpInfo
     *
     * Retrieve a PropertySet of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getElementPropertySetRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetAsync
     *
     * Retrieve a PropertySet of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        return $this->getElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetAsyncWithHttpInfo
     *
     * Retrieve a PropertySet of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet';
        $request = $this->getElementPropertySetRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySet'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetProperties
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function getElementPropertySetProperties($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk)
    {
        list($response) = $this->getElementPropertySetPropertiesWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertiesWithHttpInfo
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertiesWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $request = $this->getElementPropertySetPropertiesRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertiesAsync
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertiesAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk)
    {
        return $this->getElementPropertySetPropertiesAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetPropertiesAsyncWithHttpInfo
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertiesAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Property[]';
        $request = $this->getElementPropertySetPropertiesRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetProperties'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertiesRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetProperties'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetProperties'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetProperties'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetProperties'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetProperties'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetProperty
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function getElementPropertySetProperty($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        list($response) = $this->getElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyWithHttpInfo
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $request = $this->getElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyAsync
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        return $this->getElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->getElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetProperty'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetProperty'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinition
     *
     * Retrieve a Definition of a Property
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function getElementPropertySetPropertyDefinition($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        list($response) = $this->getElementPropertySetPropertyDefinitionWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionWithHttpInfo
     *
     * Retrieve a Definition of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $request = $this->getElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionAsync
     *
     * Retrieve a Definition of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        return $this->getElementPropertySetPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionAsyncWithHttpInfo
     *
     * Retrieve a Definition of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
        $request = $this->getElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnit
     *
     * Retrieve a Unit of a Definition
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertydefinition_pk propertydefinition_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function getElementPropertySetPropertyDefinitionUnit($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        list($response) = $this->getElementPropertySetPropertyDefinitionUnitWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitWithHttpInfo
     *
     * Retrieve a Unit of a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionUnitWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $request = $this->getElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitAsync
     *
     * Retrieve a Unit of a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        return $this->getElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo
     *
     * Retrieve a Unit of a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Unit';
        $request = $this->getElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'propertydefinition_pk' is set
        if ($propertydefinition_pk === null || (is_array($propertydefinition_pk) && count($propertydefinition_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertydefinition_pk' . '}',
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnits
     *
     * Retrieve all Units of a Definition
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertydefinition_pk propertydefinition_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     */
    public function getElementPropertySetPropertyDefinitionUnits($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        list($response) = $this->getElementPropertySetPropertyDefinitionUnitsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsWithHttpInfo
     *
     * Retrieve all Units of a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionUnitsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $request = $this->getElementPropertySetPropertyDefinitionUnitsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsAsync
     *
     * Retrieve all Units of a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitsAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        return $this->getElementPropertySetPropertyDefinitionUnitsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsAsyncWithHttpInfo
     *
     * Retrieve all Units of a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Unit[]';
        $request = $this->getElementPropertySetPropertyDefinitionUnitsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionUnits'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionUnitsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }
        // verify the required parameter 'propertydefinition_pk' is set
        if ($propertydefinition_pk === null || (is_array($propertydefinition_pk) && count($propertydefinition_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertydefinition_pk' . '}',
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitions
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     */
    public function getElementPropertySetPropertyDefinitions($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        list($response) = $this->getElementPropertySetPropertyDefinitionsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsWithHttpInfo
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $request = $this->getElementPropertySetPropertyDefinitionsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsAsync
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionsAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        return $this->getElementPropertySetPropertyDefinitionsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsAsyncWithHttpInfo
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition[]';
        $request = $this->getElementPropertySetPropertyDefinitionsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitions'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitions'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySets
     *
     * Retrieve all PropertySets of an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     */
    public function getElementPropertySets($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        list($response) = $this->getElementPropertySetsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getElementPropertySetsWithHttpInfo
     *
     * Retrieve all PropertySets of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $request = $this->getElementPropertySetsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetsAsync
     *
     * Retrieve all PropertySets of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetsAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        return $this->getElementPropertySetsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementPropertySetsAsyncWithHttpInfo
     *
     * Retrieve all PropertySets of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet[]';
        $request = $this->getElementPropertySetsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySets'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySets'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySets'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySets'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySets'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElements
     *
     * Retrieve all elements of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function getElements($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        list($response) = $this->getElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);
        return $response;
    }

    /**
     * Operation getElementsWithHttpInfo
     *
     * Retrieve all elements of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        $request = $this->getElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementsAsync
     *
     * Retrieve all elements of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsAsync($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        return $this->getElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementsAsyncWithHttpInfo
     *
     * Retrieve all elements of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        $returnType = '\OpenAPI\Client\Model\Element[]';
        $request = $this->getElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElements'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElements'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElements'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElements'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($classification)) {
            $classification = ObjectSerializer::serializeCollection($classification, '', true);
        }
        if ($classification !== null) {
            $queryParams['classification'] = $classification;
        }
        // query params
        if (is_array($classification__notation)) {
            $classification__notation = ObjectSerializer::serializeCollection($classification__notation, '', true);
        }
        if ($classification__notation !== null) {
            $queryParams['classification__notation'] = $classification__notation;
        }


        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementsFromClassification
     *
     * Retrieve all elements with the classification
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_classification_pk ifc_classification_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function getElementsFromClassification($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getElementsFromClassificationWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getElementsFromClassificationWithHttpInfo
     *
     * Retrieve all elements with the classification
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementsFromClassificationWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementsFromClassificationAsync
     *
     * Retrieve all elements with the classification
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsFromClassificationAsync($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        return $this->getElementsFromClassificationAsyncWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getElementsFromClassificationAsyncWithHttpInfo
     *
     * Retrieve all elements with the classification
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsFromClassificationAsyncWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Element[]';
        $request = $this->getElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementsFromClassification'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementsFromClassification'
            );
        }
        // verify the required parameter 'ifc_classification_pk' is set
        if ($ifc_classification_pk === null || (is_array($ifc_classification_pk) && count($ifc_classification_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_classification_pk when calling getElementsFromClassification'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementsFromClassification'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementsFromClassification'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_classification_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_classification_pk' . '}',
                ObjectSerializer::toPathValue($ifc_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfc
     *
     * Retrieve one model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ifc
     */
    public function getIfc($cloud_pk, $id, $project_pk)
    {
        list($response) = $this->getIfcWithHttpInfo($cloud_pk, $id, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcWithHttpInfo
     *
     * Retrieve one model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ifc, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getIfcRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ifc' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ifc', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ifc';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ifc',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcAsync
     *
     * Retrieve one model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcAsyncWithHttpInfo
     *
     * Retrieve one model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Ifc';
        $request = $this->getIfcRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcBVH
     *
     * Get svg file
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function getIfcBVH($cloud_pk, $id, $project_pk)
    {
        $this->getIfcBVHWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation getIfcBVHWithHttpInfo
     *
     * Get svg file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcBVHWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getIfcBVHRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcBVHAsync
     *
     * Get svg file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcBVHAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getIfcBVHAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcBVHAsyncWithHttpInfo
     *
     * Get svg file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcBVHAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->getIfcBVHRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcBVH'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcBVHRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcBVH'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcBVH'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcBVH'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/map';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcClassifications
     *
     * Retrieve all classifications in a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function getIfcClassifications($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcClassificationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcClassificationsWithHttpInfo
     *
     * Retrieve all classifications in a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcClassificationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcClassificationsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Classification[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Classification[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Classification[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Classification[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcClassificationsAsync
     *
     * Retrieve all classifications in a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcClassificationsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getIfcClassificationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcClassificationsAsyncWithHttpInfo
     *
     * Retrieve all classifications in a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcClassificationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Classification[]';
        $request = $this->getIfcClassificationsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcClassifications'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcClassificationsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcClassifications'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcClassifications'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcClassifications'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcGLTF
     *
     * Get gltf file
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function getIfcGLTF($cloud_pk, $id, $project_pk)
    {
        $this->getIfcGLTFWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation getIfcGLTFWithHttpInfo
     *
     * Get gltf file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcGLTFWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getIfcGLTFRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcGLTFAsync
     *
     * Get gltf file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcGLTFAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getIfcGLTFAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcGLTFAsyncWithHttpInfo
     *
     * Get gltf file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcGLTFAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->getIfcGLTFRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcGLTF'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcGLTFRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcGLTF'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcGLTF'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcGLTF'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/gltf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcMap
     *
     * Get bvh file
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function getIfcMap($cloud_pk, $id, $project_pk)
    {
        $this->getIfcMapWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation getIfcMapWithHttpInfo
     *
     * Get bvh file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcMapWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getIfcMapRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcMapAsync
     *
     * Get bvh file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcMapAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getIfcMapAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcMapAsyncWithHttpInfo
     *
     * Get bvh file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcMapAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->getIfcMapRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcMap'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcMapRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcMap'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcMap'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcMap'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/bvh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcMaterial
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material
     */
    public function getIfcMaterial($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcMaterialWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcMaterialWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcMaterialWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcMaterialRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Material' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Material', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Material';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Material',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcMaterialAsync
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcMaterialAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getIfcMaterialAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcMaterialAsyncWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcMaterialAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Material';
        $request = $this->getIfcMaterialRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcMaterial'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcMaterialRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcMaterial'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcMaterial'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcMaterial'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcMaterial'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcMaterials
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material[]
     */
    public function getIfcMaterials($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcMaterialsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcMaterialsWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcMaterialsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcMaterialsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Material[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Material[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Material[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Material[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcMaterialsAsync
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcMaterialsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getIfcMaterialsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcMaterialsAsyncWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcMaterialsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Material[]';
        $request = $this->getIfcMaterialsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcMaterials'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcMaterialsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcMaterials'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcMaterials'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcMaterials'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcProperties
     *
     * Retrieve all Properties of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function getIfcProperties($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcPropertiesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcPropertiesWithHttpInfo
     *
     * Retrieve all Properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcPropertiesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcPropertiesRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertiesAsync
     *
     * Retrieve all Properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertiesAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getIfcPropertiesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcPropertiesAsyncWithHttpInfo
     *
     * Retrieve all Properties of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertiesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Property[]';
        $request = $this->getIfcPropertiesRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcProperties'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcPropertiesRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcProperties'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcProperties'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcProperties'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcProperty
     *
     * Retrieve a Property of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function getIfcProperty($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcPropertyWithHttpInfo
     *
     * Retrieve a Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertyAsync
     *
     * Retrieve a Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertyAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcPropertyAsyncWithHttpInfo
     *
     * Retrieve a Property of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->getIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcPropertyDefinition
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function getIfcPropertyDefinition($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcPropertyDefinitionWithHttpInfo
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertyDefinitionAsync
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertyDefinitionAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcPropertyDefinitionAsyncWithHttpInfo
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
        $request = $this->getIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcPropertyDefinitions
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     */
    public function getIfcPropertyDefinitions($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcPropertyDefinitionsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcPropertyDefinitionsWithHttpInfo
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcPropertyDefinitionsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcPropertyDefinitionsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertyDefinitionsAsync
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertyDefinitionsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getIfcPropertyDefinitionsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcPropertyDefinitionsAsyncWithHttpInfo
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcPropertyDefinitionsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition[]';
        $request = $this->getIfcPropertyDefinitionsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcPropertyDefinitions'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcPropertyDefinitionsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcPropertyDefinitions'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcPropertyDefinitions'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcPropertyDefinitions'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcStructure
     *
     * Get structure file
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function getIfcStructure($cloud_pk, $id, $project_pk)
    {
        $this->getIfcStructureWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation getIfcStructureWithHttpInfo
     *
     * Get structure file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcStructureWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getIfcStructureRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcStructureAsync
     *
     * Get structure file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcStructureAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getIfcStructureAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcStructureAsyncWithHttpInfo
     *
     * Get structure file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcStructureAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->getIfcStructureRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcStructure'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcStructureRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcStructure'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcStructure'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcStructure'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/structure';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcSystems
     *
     * Get systems file
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function getIfcSystems($cloud_pk, $id, $project_pk)
    {
        $this->getIfcSystemsWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation getIfcSystemsWithHttpInfo
     *
     * Get systems file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcSystemsWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->getIfcSystemsRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcSystemsAsync
     *
     * Get systems file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcSystemsAsync($cloud_pk, $id, $project_pk)
    {
        return $this->getIfcSystemsAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcSystemsAsyncWithHttpInfo
     *
     * Get systems file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcSystemsAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->getIfcSystemsRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcSystems'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcSystemsRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcSystems'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcSystems'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcSystems'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/systems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcUnit
     *
     * Retrieve a Unit of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function getIfcUnit($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcUnitWithHttpInfo
     *
     * Retrieve a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcUnitAsync
     *
     * Retrieve a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcUnitAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcUnitAsyncWithHttpInfo
     *
     * Retrieve a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Unit';
        $request = $this->getIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcUnit'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcUnits
     *
     * Retrieve all Units of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     */
    public function getIfcUnits($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getIfcUnitsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getIfcUnitsWithHttpInfo
     *
     * Retrieve all Units of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcUnitsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getIfcUnitsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcUnitsAsync
     *
     * Retrieve all Units of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcUnitsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getIfcUnitsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcUnitsAsyncWithHttpInfo
     *
     * Retrieve all Units of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcUnitsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Unit[]';
        $request = $this->getIfcUnitsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcUnits'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcUnitsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcUnits'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcUnits'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcUnits'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcs
     *
     * Retrieve all models
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $status Filter the returned list by status (optional)
     * @param  string $source Filter the returned list by source (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ifc[]
     */
    public function getIfcs($cloud_pk, $project_pk, $status = null, $source = null)
    {
        list($response) = $this->getIfcsWithHttpInfo($cloud_pk, $project_pk, $status, $source);
        return $response;
    }

    /**
     * Operation getIfcsWithHttpInfo
     *
     * Retrieve all models
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $status Filter the returned list by status (optional)
     * @param  string $source Filter the returned list by source (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ifc[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIfcsWithHttpInfo($cloud_pk, $project_pk, $status = null, $source = null)
    {
        $request = $this->getIfcsRequest($cloud_pk, $project_pk, $status, $source);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ifc[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ifc[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ifc[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ifc[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcsAsync
     *
     * Retrieve all models
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $status Filter the returned list by status (optional)
     * @param  string $source Filter the returned list by source (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcsAsync($cloud_pk, $project_pk, $status = null, $source = null)
    {
        return $this->getIfcsAsyncWithHttpInfo($cloud_pk, $project_pk, $status, $source)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIfcsAsyncWithHttpInfo
     *
     * Retrieve all models
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $status Filter the returned list by status (optional)
     * @param  string $source Filter the returned list by source (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIfcsAsyncWithHttpInfo($cloud_pk, $project_pk, $status = null, $source = null)
    {
        $returnType = '\OpenAPI\Client\Model\Ifc[]';
        $request = $this->getIfcsRequest($cloud_pk, $project_pk, $status, $source);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcs'
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  string $status Filter the returned list by status (optional)
     * @param  string $source Filter the returned list by source (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIfcsRequest($cloud_pk, $project_pk, $status = null, $source = null)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcs'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcs'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($source)) {
            $source = ObjectSerializer::serializeCollection($source, '', true);
        }
        if ($source !== null) {
            $queryParams['source'] = $source;
        }


        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayer
     *
     * Retrieve a layer of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function getLayer($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getLayerWithHttpInfo
     *
     * Retrieve a layer of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Layer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Layer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Layer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Layer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayerAsync
     *
     * Retrieve a layer of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayerAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLayerAsyncWithHttpInfo
     *
     * Retrieve a layer of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Layer';
        $request = $this->getLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayer'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getLayer'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLayer'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getLayer'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getLayer'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayers
     *
     * Retrieve all layers of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer[]
     */
    public function getLayers($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getLayersWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getLayersWithHttpInfo
     *
     * Retrieve all layers of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLayersWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getLayersRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Layer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Layer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Layer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Layer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayersAsync
     *
     * Retrieve all layers of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayersAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getLayersAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLayersAsyncWithHttpInfo
     *
     * Retrieve all layers of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayersAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Layer[]';
        $request = $this->getLayersRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayers'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLayersRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getLayers'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getLayers'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getLayers'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaterial
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material
     */
    public function getMaterial($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getMaterialWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getMaterialWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMaterialWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getMaterialRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Material' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Material', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Material';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Material',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaterialAsync
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        return $this->getMaterialAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMaterialAsyncWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Material';
        $request = $this->getMaterialRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaterial'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMaterialRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getMaterial'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getMaterial'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMaterial'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getMaterial'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getMaterial'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaterials
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material[]
     */
    public function getMaterials($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        list($response) = $this->getMaterialsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getMaterialsWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMaterialsWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $request = $this->getMaterialsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Material[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Material[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Material[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Material[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaterialsAsync
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialsAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        return $this->getMaterialsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMaterialsAsyncWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialsAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Material[]';
        $request = $this->getMaterialsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaterials'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMaterialsRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getMaterials'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getMaterials'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getMaterials'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getMaterials'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessorHandler
     *
     * Retrieve a processor handler
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     */
    public function getProcessorHandler($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getProcessorHandlerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getProcessorHandlerWithHttpInfo
     *
     * Retrieve a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessorHandlerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProcessorHandler' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProcessorHandler', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProcessorHandler';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProcessorHandler',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessorHandlerAsync
     *
     * Retrieve a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlerAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getProcessorHandlerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessorHandlerAsyncWithHttpInfo
     *
     * Retrieve a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\ProcessorHandler';
        $request = $this->getProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessorHandler'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProcessorHandler'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProcessorHandler'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getProcessorHandler'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProcessorHandler'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessorHandlers
     *
     * Get all processor handlers
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler[]
     */
    public function getProcessorHandlers($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getProcessorHandlersWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getProcessorHandlersWithHttpInfo
     *
     * Get all processor handlers
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessorHandlersWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getProcessorHandlersRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProcessorHandler[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProcessorHandler[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProcessorHandler[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProcessorHandler[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessorHandlersAsync
     *
     * Get all processor handlers
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlersAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getProcessorHandlersAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessorHandlersAsyncWithHttpInfo
     *
     * Get all processor handlers
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlersAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\ProcessorHandler[]';
        $request = $this->getProcessorHandlersRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessorHandlers'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessorHandlersRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProcessorHandlers'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getProcessorHandlers'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProcessorHandlers'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertySet
     *
     * Retrieve a PropertySet of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function getPropertySet($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getPropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getPropertySetWithHttpInfo
     *
     * Retrieve a PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getPropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertySetAsync
     *
     * Retrieve a PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getPropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertySetAsyncWithHttpInfo
     *
     * Retrieve a PropertySet of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet';
        $request = $this->getPropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getPropertySet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getPropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getPropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertySets
     *
     * Retrieve all PropertySets of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     */
    public function getPropertySets($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getPropertySetsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getPropertySetsWithHttpInfo
     *
     * Retrieve all PropertySets of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertySetsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getPropertySetsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertySetsAsync
     *
     * Retrieve all PropertySets of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getPropertySetsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPropertySetsAsyncWithHttpInfo
     *
     * Retrieve all PropertySets of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet[]';
        $request = $this->getPropertySetsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertySets'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertySetsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getPropertySets'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getPropertySets'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getPropertySets'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRawElements
     *
     * Retrieve all elements in a optimized format
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RawElements
     */
    public function getRawElements($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        list($response) = $this->getRawElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);
        return $response;
    }

    /**
     * Operation getRawElementsWithHttpInfo
     *
     * Retrieve all elements in a optimized format
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RawElements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRawElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        $request = $this->getRawElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RawElements' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RawElements', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RawElements';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RawElements',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRawElementsAsync
     *
     * Retrieve all elements in a optimized format
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRawElementsAsync($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        return $this->getRawElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRawElementsAsyncWithHttpInfo
     *
     * Retrieve all elements in a optimized format
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRawElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        $returnType = '\OpenAPI\Client\Model\RawElements';
        $request = $this->getRawElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRawElements'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRawElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRawElements'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getRawElements'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRawElements'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($classification)) {
            $classification = ObjectSerializer::serializeCollection($classification, '', true);
        }
        if ($classification !== null) {
            $queryParams['classification'] = $classification;
        }
        // query params
        if (is_array($classification__notation)) {
            $classification__notation = ObjectSerializer::serializeCollection($classification__notation, '', true);
        }
        if ($classification__notation !== null) {
            $queryParams['classification__notation'] = $classification__notation;
        }


        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimpleElement
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimpleElement
     */
    public function getSimpleElement($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        list($response) = $this->getSimpleElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid);
        return $response;
    }

    /**
     * Operation getSimpleElementWithHttpInfo
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimpleElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimpleElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $request = $this->getSimpleElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SimpleElement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SimpleElement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SimpleElement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SimpleElement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimpleElementAsync
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementAsync($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        return $this->getSimpleElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimpleElementAsyncWithHttpInfo
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $returnType = '\OpenAPI\Client\Model\SimpleElement';
        $request = $this->getSimpleElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimpleElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSimpleElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSimpleElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSimpleElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSimpleElement'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSimpleElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimpleElements
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimpleElement
     */
    public function getSimpleElements($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        list($response) = $this->getSimpleElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);
        return $response;
    }

    /**
     * Operation getSimpleElementsWithHttpInfo
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimpleElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimpleElementsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        $request = $this->getSimpleElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SimpleElement' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SimpleElement', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SimpleElement';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SimpleElement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimpleElementsAsync
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementsAsync($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        return $this->getSimpleElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimpleElementsAsyncWithHttpInfo
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        $returnType = '\OpenAPI\Client\Model\SimpleElement';
        $request = $this->getSimpleElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type, $classification, $classification__notation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimpleElements'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $type Filter the returned list by type (optional)
     * @param  string $classification Filter the returned list by classification (optional)
     * @param  string $classification__notation Filter the returned list by classification__notation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSimpleElementsRequest($cloud_pk, $ifc_pk, $project_pk, $type = null, $classification = null, $classification__notation = null)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSimpleElements'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSimpleElements'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSimpleElements'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($classification)) {
            $classification = ObjectSerializer::serializeCollection($classification, '', true);
        }
        if ($classification !== null) {
            $queryParams['classification'] = $classification;
        }
        // query params
        if (is_array($classification__notation)) {
            $classification__notation = ObjectSerializer::serializeCollection($classification__notation, '', true);
        }
        if ($classification__notation !== null) {
            $queryParams['classification__notation'] = $classification__notation;
        }


        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpace
     *
     * Retrieve one space of the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     */
    public function getSpace($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getSpaceWithHttpInfo
     *
     * Retrieve one space of the model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Space' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Space', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Space';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Space',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpaceAsync
     *
     * Retrieve one space of the model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpaceAsyncWithHttpInfo
     *
     * Retrieve one space of the model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Space';
        $request = $this->getSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpaces
     *
     * Retrieve all spaces of the model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space[]
     */
    public function getSpaces($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getSpacesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getSpacesWithHttpInfo
     *
     * Retrieve all spaces of the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpacesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getSpacesRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Space[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Space[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Space[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Space[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpacesAsync
     *
     * Retrieve all spaces of the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpacesAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getSpacesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSpacesAsyncWithHttpInfo
     *
     * Retrieve all spaces of the model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpacesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Space[]';
        $request = $this->getSpacesRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpaces'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpacesRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSpaces'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSpaces'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSpaces'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystem
     *
     * Retrieve a system of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function getSystem($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        list($response) = $this->getSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid);
        return $response;
    }

    /**
     * Operation getSystemWithHttpInfo
     *
     * Retrieve a system of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $request = $this->getSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\System' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\System', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\System';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\System',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemAsync
     *
     * Retrieve a system of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemAsync($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        return $this->getSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSystemAsyncWithHttpInfo
     *
     * Retrieve a system of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        $returnType = '\OpenAPI\Client\Model\System';
        $request = $this->getSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystem'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSystem'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSystem'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSystem'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSystem'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystems
     *
     * Retrieve all systems of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System[]
     */
    public function getSystems($cloud_pk, $ifc_pk, $project_pk)
    {
        list($response) = $this->getSystemsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getSystemsWithHttpInfo
     *
     * Retrieve all systems of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSystemsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->getSystemsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\System[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\System[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\System[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\System[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemsAsync
     *
     * Retrieve all systems of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->getSystemsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSystemsAsyncWithHttpInfo
     *
     * Retrieve all systems of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\System[]';
        $request = $this->getSystemsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystems'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSystemsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSystems'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSystems'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSystems'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZone
     *
     * Retrieve one zone of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     */
    public function getZone($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        list($response) = $this->getZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk);
        return $response;
    }

    /**
     * Operation getZoneWithHttpInfo
     *
     * Retrieve one zone of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function getZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $request = $this->getZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Zone' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Zone', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Zone';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Zone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneAsync
     *
     * Retrieve one zone of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneAsync($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        return $this->getZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getZoneAsyncWithHttpInfo
     *
     * Retrieve one zone of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        $returnType = '\OpenAPI\Client\Model\Zone';
        $request = $this->getZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZone'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZone'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getZone'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZone'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZone'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneSpace
     *
     * Retrieve one space of a zone
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $zone_pk zone_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function getZoneSpace($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        list($response) = $this->getZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk);
        return $response;
    }

    /**
     * Operation getZoneSpaceWithHttpInfo
     *
     * Retrieve one space of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function getZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        $request = $this->getZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ZoneSpace' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ZoneSpace', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ZoneSpace';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ZoneSpace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneSpaceAsync
     *
     * Retrieve one space of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        return $this->getZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getZoneSpaceAsyncWithHttpInfo
     *
     * Retrieve one space of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        $returnType = '\OpenAPI\Client\Model\ZoneSpace';
        $request = $this->getZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getZoneSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZoneSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneSpace'
            );
        }
        // verify the required parameter 'zone_pk' is set
        if ($zone_pk === null || (is_array($zone_pk) && count($zone_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling getZoneSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_pk' . '}',
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneSpaces
     *
     * Retrieve all spaces of a zone
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $zone_pk zone_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace[]
     */
    public function getZoneSpaces($cloud_pk, $ifc_pk, $project_pk, $zone_pk)
    {
        list($response) = $this->getZoneSpacesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk);
        return $response;
    }

    /**
     * Operation getZoneSpacesWithHttpInfo
     *
     * Retrieve all spaces of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getZoneSpacesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk)
    {
        $request = $this->getZoneSpacesRequest($cloud_pk, $ifc_pk, $project_pk, $zone_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ZoneSpace[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ZoneSpace[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ZoneSpace[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ZoneSpace[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneSpacesAsync
     *
     * Retrieve all spaces of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpacesAsync($cloud_pk, $ifc_pk, $project_pk, $zone_pk)
    {
        return $this->getZoneSpacesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getZoneSpacesAsyncWithHttpInfo
     *
     * Retrieve all spaces of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpacesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $zone_pk)
    {
        $returnType = '\OpenAPI\Client\Model\ZoneSpace[]';
        $request = $this->getZoneSpacesRequest($cloud_pk, $ifc_pk, $project_pk, $zone_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneSpaces'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZoneSpacesRequest($cloud_pk, $ifc_pk, $project_pk, $zone_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneSpaces'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZoneSpaces'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneSpaces'
            );
        }
        // verify the required parameter 'zone_pk' is set
        if ($zone_pk === null || (is_array($zone_pk) && count($zone_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling getZoneSpaces'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_pk' . '}',
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZones
     *
     * Retrieve zones of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $color Filter the returned list by color (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone[]
     */
    public function getZones($cloud_pk, $ifc_pk, $project_pk, $color = null)
    {
        list($response) = $this->getZonesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $color);
        return $response;
    }

    /**
     * Operation getZonesWithHttpInfo
     *
     * Retrieve zones of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $color Filter the returned list by color (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getZonesWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $color = null)
    {
        $request = $this->getZonesRequest($cloud_pk, $ifc_pk, $project_pk, $color);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Zone[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Zone[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Zone[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Zone[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZonesAsync
     *
     * Retrieve zones of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $color Filter the returned list by color (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZonesAsync($cloud_pk, $ifc_pk, $project_pk, $color = null)
    {
        return $this->getZonesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $color)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getZonesAsyncWithHttpInfo
     *
     * Retrieve zones of a model
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $color Filter the returned list by color (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZonesAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $color = null)
    {
        $returnType = '\OpenAPI\Client\Model\Zone[]';
        $request = $this->getZonesRequest($cloud_pk, $ifc_pk, $project_pk, $color);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZones'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $color Filter the returned list by color (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZonesRequest($cloud_pk, $ifc_pk, $project_pk, $color = null)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZones'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZones'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZones'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($color)) {
            $color = ObjectSerializer::serializeCollection($color, '', true);
        }
        if ($color !== null) {
            $queryParams['color'] = $color;
        }


        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClassificationElementRelations
     *
     * List all associations between classifications and elements
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listClassificationElementRelations($cloud_pk, $ifc_pk, $project_pk)
    {
        $this->listClassificationElementRelationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk);
    }

    /**
     * Operation listClassificationElementRelationsWithHttpInfo
     *
     * List all associations between classifications and elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listClassificationElementRelationsWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $request = $this->listClassificationElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listClassificationElementRelationsAsync
     *
     * List all associations between classifications and elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClassificationElementRelationsAsync($cloud_pk, $ifc_pk, $project_pk)
    {
        return $this->listClassificationElementRelationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listClassificationElementRelationsAsyncWithHttpInfo
     *
     * List all associations between classifications and elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClassificationElementRelationsAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->listClassificationElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClassificationElementRelations'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listClassificationElementRelationsRequest($cloud_pk, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling listClassificationElementRelations'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling listClassificationElementRelations'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling listClassificationElementRelations'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeIfcs
     *
     * Merge IFC files
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMerge $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mergeIfcs($cloud_pk, $project_pk, $data)
    {
        $this->mergeIfcsWithHttpInfo($cloud_pk, $project_pk, $data);
    }

    /**
     * Operation mergeIfcsWithHttpInfo
     *
     * Merge IFC files
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMerge $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeIfcsWithHttpInfo($cloud_pk, $project_pk, $data)
    {
        $request = $this->mergeIfcsRequest($cloud_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation mergeIfcsAsync
     *
     * Merge IFC files
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMerge $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeIfcsAsync($cloud_pk, $project_pk, $data)
    {
        return $this->mergeIfcsAsyncWithHttpInfo($cloud_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeIfcsAsyncWithHttpInfo
     *
     * Merge IFC files
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMerge $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeIfcsAsyncWithHttpInfo($cloud_pk, $project_pk, $data)
    {
        $returnType = '';
        $request = $this->mergeIfcsRequest($cloud_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeIfcs'
     *
     * @param  string $cloud_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMerge $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mergeIfcsRequest($cloud_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling mergeIfcs'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling mergeIfcs'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling mergeIfcs'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation optimizeIfc
     *
     * Optimize the IFC
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimize $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function optimizeIfc($cloud_pk, $id, $project_pk, $data)
    {
        $this->optimizeIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data);
    }

    /**
     * Operation optimizeIfcWithHttpInfo
     *
     * Optimize the IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimize $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function optimizeIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->optimizeIfcRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation optimizeIfcAsync
     *
     * Optimize the IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimize $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function optimizeIfcAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->optimizeIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation optimizeIfcAsyncWithHttpInfo
     *
     * Optimize the IFC
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimize $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function optimizeIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '';
        $request = $this->optimizeIfcRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'optimizeIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimize $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function optimizeIfcRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling optimizeIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling optimizeIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling optimizeIfc'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling optimizeIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeAllElementPropertySet
     *
     * Remove all property sets from element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeAllElementPropertySet($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $this->removeAllElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk);
    }

    /**
     * Operation removeAllElementPropertySetWithHttpInfo
     *
     * Remove all property sets from element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAllElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $request = $this->removeAllElementPropertySetRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeAllElementPropertySetAsync
     *
     * Remove all property sets from element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAllElementPropertySetAsync($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        return $this->removeAllElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeAllElementPropertySetAsyncWithHttpInfo
     *
     * Remove all property sets from element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAllElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->removeAllElementPropertySetRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeAllElementPropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeAllElementPropertySetRequest($cloud_pk, $element_uuid, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeAllElementPropertySet'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeAllElementPropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeAllElementPropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeAllElementPropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeClassificationOfElement
     *
     * Remove a classification from an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeClassificationOfElement($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $this->removeClassificationOfElementWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation removeClassificationOfElementWithHttpInfo
     *
     * Remove a classification from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeClassificationOfElementWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $request = $this->removeClassificationOfElementRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeClassificationOfElementAsync
     *
     * Remove a classification from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeClassificationOfElementAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        return $this->removeClassificationOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeClassificationOfElementAsyncWithHttpInfo
     *
     * Remove a classification from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeClassificationOfElementAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->removeClassificationOfElementRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeClassificationOfElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeClassificationOfElementRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeClassificationOfElement'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeClassificationOfElement'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeClassificationOfElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeClassificationOfElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeClassificationOfElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySet
     *
     * Remove a PropertySet from an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySet($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $this->removeElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);
    }

    /**
     * Operation removeElementPropertySetWithHttpInfo
     *
     * Remove a PropertySet from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $request = $this->removeElementPropertySetRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetAsync
     *
     * Remove a PropertySet from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        return $this->removeElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeElementPropertySetAsyncWithHttpInfo
     *
     * Remove a PropertySet from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        $returnType = '';
        $request = $this->removeElementPropertySetRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySet'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetProperty
     *
     * Remove a property from a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySetProperty($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $this->removeElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk);
    }

    /**
     * Operation removeElementPropertySetPropertyWithHttpInfo
     *
     * Remove a property from a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $request = $this->removeElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyAsync
     *
     * Remove a property from a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        return $this->removeElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Remove a property from a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        $returnType = '';
        $request = $this->removeElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetProperty'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetProperty'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinition
     *
     * Remove a Definition from a Property
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySetPropertyDefinition($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $this->removeElementPropertySetPropertyDefinitionWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionWithHttpInfo
     *
     * Remove a Definition from a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetPropertyDefinitionWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $request = $this->removeElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionAsync
     *
     * Remove a Definition from a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        return $this->removeElementPropertySetPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionAsyncWithHttpInfo
     *
     * Remove a Definition from a Property
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        $returnType = '';
        $request = $this->removeElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetPropertyDefinitionRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnit
     *
     * Remove a Unit from a Definition
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $property_pk property_pk (required)
     * @param  string $propertydefinition_pk propertydefinition_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySetPropertyDefinitionUnit($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $this->removeElementPropertySetPropertyDefinitionUnitWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitWithHttpInfo
     *
     * Remove a Unit from a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetPropertyDefinitionUnitWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $request = $this->removeElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitAsync
     *
     * Remove a Unit from a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionUnitAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        return $this->removeElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo
     *
     * Remove a Unit from a Definition
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        $returnType = '';
        $request = $this->removeElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDefinitionUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $property_pk (required)
     * @param  string $propertydefinition_pk (required)
     * @param  string $propertyset_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetPropertyDefinitionUnitRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $property_pk, $propertydefinition_pk, $propertyset_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'property_pk' is set
        if ($property_pk === null || (is_array($property_pk) && count($property_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'propertydefinition_pk' is set
        if ($propertydefinition_pk === null || (is_array($propertydefinition_pk) && count($propertydefinition_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'property_pk' . '}',
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertydefinition_pk' . '}',
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementsFromClassification
     *
     * Remove the classification from all elements
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_classification_pk ifc_classification_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementsFromClassification($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid)
    {
        $this->removeElementsFromClassificationWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid);
    }

    /**
     * Operation removeElementsFromClassificationWithHttpInfo
     *
     * Remove the classification from all elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementsFromClassificationWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid)
    {
        $request = $this->removeElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementsFromClassificationAsync
     *
     * Remove the classification from all elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementsFromClassificationAsync($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid)
    {
        return $this->removeElementsFromClassificationAsyncWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeElementsFromClassificationAsyncWithHttpInfo
     *
     * Remove the classification from all elements
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementsFromClassificationAsyncWithHttpInfo($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid)
    {
        $returnType = '';
        $request = $this->removeElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementsFromClassification'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_classification_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementsFromClassificationRequest($cloud_pk, $ifc_classification_pk, $ifc_pk, $project_pk, $uuid)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementsFromClassification'
            );
        }
        // verify the required parameter 'ifc_classification_pk' is set
        if ($ifc_classification_pk === null || (is_array($ifc_classification_pk) && count($ifc_classification_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_classification_pk when calling removeElementsFromClassification'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementsFromClassification'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementsFromClassification'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling removeElementsFromClassification'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_classification_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_classification_pk' . '}',
                ObjectSerializer::toPathValue($ifc_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reprocessIfc
     *
     * Reprocess IFC file
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reprocessIfc($cloud_pk, $id, $project_pk)
    {
        $this->reprocessIfcWithHttpInfo($cloud_pk, $id, $project_pk);
    }

    /**
     * Operation reprocessIfcWithHttpInfo
     *
     * Reprocess IFC file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reprocessIfcWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $request = $this->reprocessIfcRequest($cloud_pk, $id, $project_pk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reprocessIfcAsync
     *
     * Reprocess IFC file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reprocessIfcAsync($cloud_pk, $id, $project_pk)
    {
        return $this->reprocessIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reprocessIfcAsyncWithHttpInfo
     *
     * Reprocess IFC file
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reprocessIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk)
    {
        $returnType = '';
        $request = $this->reprocessIfcRequest($cloud_pk, $id, $project_pk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reprocessIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reprocessIfcRequest($cloud_pk, $id, $project_pk)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling reprocessIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reprocessIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling reprocessIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccessToken
     *
     * Update some fields of a token
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $token token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function updateAccessToken($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        list($response) = $this->updateAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data);
        return $response;
    }

    /**
     * Operation updateAccessTokenWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccessTokenWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        $request = $this->updateAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcAccessToken' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcAccessToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcAccessToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccessTokenAsync
     *
     * Update some fields of a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccessTokenAsync($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        return $this->updateAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccessTokenAsyncWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccessTokenAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        $returnType = '\OpenAPI\Client\Model\IfcAccessToken';
        $request = $this->updateAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccessToken'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\IfcAccessToken $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccessTokenRequest($cloud_pk, $ifc_pk, $project_pk, $token, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateAccessToken'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateAccessToken'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateAccessToken'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling updateAccessToken'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateAccessToken'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateElement
     *
     * Update some fields of an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     */
    public function updateElement($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        list($response) = $this->updateElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);
        return $response;
    }

    /**
     * Operation updateElementWithHttpInfo
     *
     * Update some fields of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateElementWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $request = $this->updateElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Element' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Element', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Element';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Element',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateElementAsync
     *
     * Update some fields of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementAsync($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        return $this->updateElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateElementAsyncWithHttpInfo
     *
     * Update some fields of an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Element';
        $request = $this->updateElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateElement'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC element or element type UUID (required)
     * @param  \OpenAPI\Client\Model\Element $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateElementRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateElement'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateElement'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateElement'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateElement'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateElement'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateElementPropertySetProperty
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $propertyset_pk propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function updateElementPropertySetProperty($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        list($response) = $this->updateElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data);
        return $response;
    }

    /**
     * Operation updateElementPropertySetPropertyWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateElementPropertySetPropertyWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        $request = $this->updateElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateElementPropertySetPropertyAsync
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementPropertySetPropertyAsync($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        return $this->updateElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementPropertySetPropertyAsyncWithHttpInfo($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->updateElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateElementPropertySetProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $propertyset_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateElementPropertySetPropertyRequest($cloud_pk, $element_uuid, $id, $ifc_pk, $project_pk, $propertyset_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'element_uuid' is set
        if ($element_uuid === null || (is_array($element_uuid) && count($element_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling updateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'propertyset_pk' is set
        if ($propertyset_pk === null || (is_array($propertyset_pk) && count($propertyset_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling updateElementPropertySetProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateElementPropertySetProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'element_uuid' . '}',
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyset_pk' . '}',
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfc
     *
     * Update some fields of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ifc
     */
    public function updateIfc($cloud_pk, $id, $project_pk, $data)
    {
        list($response) = $this->updateIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateIfcWithHttpInfo
     *
     * Update some fields of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ifc, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIfcWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $request = $this->updateIfcRequest($cloud_pk, $id, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ifc' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ifc', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ifc';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ifc',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcAsync
     *
     * Update some fields of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcAsync($cloud_pk, $id, $project_pk, $data)
    {
        return $this->updateIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIfcAsyncWithHttpInfo
     *
     * Update some fields of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Ifc';
        $request = $this->updateIfcRequest($cloud_pk, $id, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfc'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Ifc $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateIfcRequest($cloud_pk, $id, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfc'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfc'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfc'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateIfc'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcFiles
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk project_pk (required)
     * @param  \SplFileObject $structure_file structure_file (optional)
     * @param  \SplFileObject $systems_file systems_file (optional)
     * @param  \SplFileObject $map_file map_file (optional)
     * @param  \SplFileObject $gltf_file gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file bvh_tree_file (optional)
     * @param  \SplFileObject $viewer_360_file viewer_360_file (optional)
     * @param  \SplFileObject $xkt_file xkt_file (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcFiles
     */
    public function updateIfcFiles($cloud_pk, $id, $project_pk, $structure_file = null, $systems_file = null, $map_file = null, $gltf_file = null, $gltf_with_openings_file = null, $bvh_tree_file = null, $viewer_360_file = null, $xkt_file = null)
    {
        list($response) = $this->updateIfcFilesWithHttpInfo($cloud_pk, $id, $project_pk, $structure_file, $systems_file, $map_file, $gltf_file, $gltf_with_openings_file, $bvh_tree_file, $viewer_360_file, $xkt_file);
        return $response;
    }

    /**
     * Operation updateIfcFilesWithHttpInfo
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $viewer_360_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcFiles, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIfcFilesWithHttpInfo($cloud_pk, $id, $project_pk, $structure_file = null, $systems_file = null, $map_file = null, $gltf_file = null, $gltf_with_openings_file = null, $bvh_tree_file = null, $viewer_360_file = null, $xkt_file = null)
    {
        $request = $this->updateIfcFilesRequest($cloud_pk, $id, $project_pk, $structure_file, $systems_file, $map_file, $gltf_file, $gltf_with_openings_file, $bvh_tree_file, $viewer_360_file, $xkt_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IfcFiles' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IfcFiles', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IfcFiles';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IfcFiles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcFilesAsync
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $viewer_360_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcFilesAsync($cloud_pk, $id, $project_pk, $structure_file = null, $systems_file = null, $map_file = null, $gltf_file = null, $gltf_with_openings_file = null, $bvh_tree_file = null, $viewer_360_file = null, $xkt_file = null)
    {
        return $this->updateIfcFilesAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $structure_file, $systems_file, $map_file, $gltf_file, $gltf_with_openings_file, $bvh_tree_file, $viewer_360_file, $xkt_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIfcFilesAsyncWithHttpInfo
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $viewer_360_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcFilesAsyncWithHttpInfo($cloud_pk, $id, $project_pk, $structure_file = null, $systems_file = null, $map_file = null, $gltf_file = null, $gltf_with_openings_file = null, $bvh_tree_file = null, $viewer_360_file = null, $xkt_file = null)
    {
        $returnType = '\OpenAPI\Client\Model\IfcFiles';
        $request = $this->updateIfcFilesRequest($cloud_pk, $id, $project_pk, $structure_file, $systems_file, $map_file, $gltf_file, $gltf_with_openings_file, $bvh_tree_file, $viewer_360_file, $xkt_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcFiles'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this ifc. (required)
     * @param  string $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $viewer_360_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateIfcFilesRequest($cloud_pk, $id, $project_pk, $structure_file = null, $systems_file = null, $map_file = null, $gltf_file = null, $gltf_with_openings_file = null, $bvh_tree_file = null, $viewer_360_file = null, $xkt_file = null)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcFiles'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcFiles'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcFiles'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        // form params
        if ($structure_file !== null) {
            $multipart = true;
            $formParams['structure_file'] = [];
            $paramFiles = is_array($structure_file) ? $structure_file : [$structure_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['structure_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($systems_file !== null) {
            $multipart = true;
            $formParams['systems_file'] = [];
            $paramFiles = is_array($systems_file) ? $systems_file : [$systems_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['systems_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($map_file !== null) {
            $multipart = true;
            $formParams['map_file'] = [];
            $paramFiles = is_array($map_file) ? $map_file : [$map_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['map_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($gltf_file !== null) {
            $multipart = true;
            $formParams['gltf_file'] = [];
            $paramFiles = is_array($gltf_file) ? $gltf_file : [$gltf_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['gltf_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($gltf_with_openings_file !== null) {
            $multipart = true;
            $formParams['gltf_with_openings_file'] = [];
            $paramFiles = is_array($gltf_with_openings_file) ? $gltf_with_openings_file : [$gltf_with_openings_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['gltf_with_openings_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($bvh_tree_file !== null) {
            $multipart = true;
            $formParams['bvh_tree_file'] = [];
            $paramFiles = is_array($bvh_tree_file) ? $bvh_tree_file : [$bvh_tree_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['bvh_tree_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($viewer_360_file !== null) {
            $multipart = true;
            $formParams['viewer_360_file'] = [];
            $paramFiles = is_array($viewer_360_file) ? $viewer_360_file : [$viewer_360_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['viewer_360_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($xkt_file !== null) {
            $multipart = true;
            $formParams['xkt_file'] = [];
            $paramFiles = is_array($xkt_file) ? $xkt_file : [$xkt_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['xkt_file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcProperty
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function updateIfcProperty($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateIfcPropertyWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIfcPropertyWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Property' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Property', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Property';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Property',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcPropertyAsync
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcPropertyAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIfcPropertyAsyncWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcPropertyAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Property';
        $request = $this->updateIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcProperty'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Property $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateIfcPropertyRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcProperty'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcProperty'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateIfcProperty'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcProperty'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateIfcProperty'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcPropertyDefinition
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function updateIfcPropertyDefinition($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateIfcPropertyDefinitionWithHttpInfo
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIfcPropertyDefinitionWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyDefinition' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyDefinition', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyDefinition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcPropertyDefinitionAsync
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcPropertyDefinitionAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIfcPropertyDefinitionAsyncWithHttpInfo
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcPropertyDefinitionAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertyDefinition';
        $request = $this->updateIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcPropertyDefinition'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinition $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateIfcPropertyDefinitionRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcPropertyDefinition'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateIfcPropertyDefinition'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcUnit
     *
     * Update some fields of a Unit of a model
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function updateIfcUnit($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateIfcUnitWithHttpInfo
     *
     * Update some fields of a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIfcUnitWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Unit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Unit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Unit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Unit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcUnitAsync
     *
     * Update some fields of a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcUnitAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIfcUnitAsyncWithHttpInfo
     *
     * Update some fields of a Unit of a model
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIfcUnitAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Unit';
        $request = $this->updateIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcUnit'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Unit $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateIfcUnitRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcUnit'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcUnit'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateIfcUnit'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcUnit'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateIfcUnit'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLayer
     *
     * Update some fields of a layer
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function updateLayer($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateLayerWithHttpInfo
     *
     * Update some fields of a layer
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLayerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Layer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Layer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Layer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Layer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLayerAsync
     *
     * Update some fields of a layer
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLayerAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLayerAsyncWithHttpInfo
     *
     * Update some fields of a layer
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLayerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Layer';
        $request = $this->updateLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLayer'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Layer $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLayerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateLayer'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLayer'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateLayer'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateLayer'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateLayer'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProcessorHandler
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     */
    public function updateProcessorHandler($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateProcessorHandlerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateProcessorHandlerWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProcessorHandlerWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProcessorHandler' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProcessorHandler', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProcessorHandler';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProcessorHandler',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProcessorHandlerAsync
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProcessorHandlerAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateProcessorHandlerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProcessorHandlerAsyncWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProcessorHandlerAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\ProcessorHandler';
        $request = $this->updateProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProcessorHandler'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\ProcessorHandler $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProcessorHandlerRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateProcessorHandler'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProcessorHandler'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateProcessorHandler'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateProcessorHandler'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateProcessorHandler'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePropertySet
     *
     * Update some fields of a PropertySet
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function updatePropertySet($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updatePropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updatePropertySetWithHttpInfo
     *
     * Update some fields of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePropertySetWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updatePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePropertySetAsync
     *
     * Update some fields of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePropertySetAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updatePropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePropertySetAsyncWithHttpInfo
     *
     * Update some fields of a PropertySet
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePropertySetAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\PropertySet';
        $request = $this->updatePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePropertySet'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\PropertySet $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePropertySetRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updatePropertySet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePropertySet'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updatePropertySet'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updatePropertySet'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updatePropertySet'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSpace
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     */
    public function updateSpace($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateSpaceWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Space' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Space', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Space';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Space',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSpaceAsync
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSpaceAsyncWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Space';
        $request = $this->updateSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Space $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateSpace'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSystem
     *
     * Update some fields of a system
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function updateSystem($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        list($response) = $this->updateSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);
        return $response;
    }

    /**
     * Operation updateSystemWithHttpInfo
     *
     * Update some fields of a system
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSystemWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $request = $this->updateSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\System' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\System', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\System';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\System',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSystemAsync
     *
     * Update some fields of a system
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSystemAsync($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        return $this->updateSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSystemAsyncWithHttpInfo
     *
     * Update some fields of a system
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSystemAsyncWithHttpInfo($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        $returnType = '\OpenAPI\Client\Model\System';
        $request = $this->updateSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSystem'
     *
     * @param  string $cloud_pk (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $uuid IFC sytem or system type UUID (required)
     * @param  \OpenAPI\Client\Model\System $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSystemRequest($cloud_pk, $ifc_pk, $project_pk, $uuid, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateSystem'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateSystem'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateSystem'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateSystem'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateSystem'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZone
     *
     * Update some fields of a zone
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     */
    public function updateZone($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        list($response) = $this->updateZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data);
        return $response;
    }

    /**
     * Operation updateZoneWithHttpInfo
     *
     * Update some fields of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateZoneWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $request = $this->updateZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Zone' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Zone', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Zone';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Zone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZoneAsync
     *
     * Update some fields of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneAsync($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        return $this->updateZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateZoneAsyncWithHttpInfo
     *
     * Update some fields of a zone
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\Zone';
        $request = $this->updateZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZone'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  \OpenAPI\Client\Model\Zone $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateZoneRequest($cloud_pk, $id, $ifc_pk, $project_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateZone'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateZone'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateZone'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateZone'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateZone'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZoneSpace
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk ifc_pk (required)
     * @param  string $project_pk project_pk (required)
     * @param  string $zone_pk zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function updateZoneSpace($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        list($response) = $this->updateZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data);
        return $response;
    }

    /**
     * Operation updateZoneSpaceWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateZoneSpaceWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        $request = $this->updateZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ZoneSpace' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ZoneSpace', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ZoneSpace';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ZoneSpace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZoneSpaceAsync
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneSpaceAsync($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        return $this->updateZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateZoneSpaceAsyncWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneSpaceAsyncWithHttpInfo($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        $returnType = '\OpenAPI\Client\Model\ZoneSpace';
        $request = $this->updateZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZoneSpace'
     *
     * @param  string $cloud_pk (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  string $ifc_pk (required)
     * @param  string $project_pk (required)
     * @param  string $zone_pk (required)
     * @param  \OpenAPI\Client\Model\ZoneSpace $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateZoneSpaceRequest($cloud_pk, $id, $ifc_pk, $project_pk, $zone_pk, $data)
    {
        // verify the required parameter 'cloud_pk' is set
        if ($cloud_pk === null || (is_array($cloud_pk) && count($cloud_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateZoneSpace'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateZoneSpace'
            );
        }
        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateZoneSpace'
            );
        }
        // verify the required parameter 'project_pk' is set
        if ($project_pk === null || (is_array($project_pk) && count($project_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateZoneSpace'
            );
        }
        // verify the required parameter 'zone_pk' is set
        if ($zone_pk === null || (is_array($zone_pk) && count($zone_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling updateZoneSpace'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling updateZoneSpace'
            );
        }

        $resourcePath = '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'cloud_pk' . '}',
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'ifc_pk' . '}',
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'project_pk' . '}',
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                '{' . 'zone_pk' . '}',
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($data)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
