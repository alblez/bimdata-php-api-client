<?php
/**
 * Comment
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Comment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Comment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Comment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guid' => 'string',
        'date' => '\DateTime',
        'author' => 'string',
        'comment' => 'string',
        'viewpoint_guid' => 'string',
        'reply_to_comment_guid' => 'string',
        'topic_guid' => 'string',
        'modified_author' => 'string',
        'modified_date' => '\DateTime',
        'viewpoint_temp_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guid' => 'uuid',
        'date' => 'date-time',
        'author' => null,
        'comment' => null,
        'viewpoint_guid' => 'uuid',
        'reply_to_comment_guid' => 'uuid',
        'topic_guid' => 'uuid',
        'modified_author' => null,
        'modified_date' => 'date-time',
        'viewpoint_temp_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'date' => 'date',
        'author' => 'author',
        'comment' => 'comment',
        'viewpoint_guid' => 'viewpoint_guid',
        'reply_to_comment_guid' => 'reply_to_comment_guid',
        'topic_guid' => 'topic_guid',
        'modified_author' => 'modified_author',
        'modified_date' => 'modified_date',
        'viewpoint_temp_id' => 'viewpoint_temp_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'date' => 'setDate',
        'author' => 'setAuthor',
        'comment' => 'setComment',
        'viewpoint_guid' => 'setViewpointGuid',
        'reply_to_comment_guid' => 'setReplyToCommentGuid',
        'topic_guid' => 'setTopicGuid',
        'modified_author' => 'setModifiedAuthor',
        'modified_date' => 'setModifiedDate',
        'viewpoint_temp_id' => 'setViewpointTempId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'date' => 'getDate',
        'author' => 'getAuthor',
        'comment' => 'getComment',
        'viewpoint_guid' => 'getViewpointGuid',
        'reply_to_comment_guid' => 'getReplyToCommentGuid',
        'topic_guid' => 'getTopicGuid',
        'modified_author' => 'getModifiedAuthor',
        'modified_date' => 'getModifiedDate',
        'viewpoint_temp_id' => 'getViewpointTempId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = $data['guid'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['author'] = $data['author'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['viewpoint_guid'] = $data['viewpoint_guid'] ?? null;
        $this->container['reply_to_comment_guid'] = $data['reply_to_comment_guid'] ?? null;
        $this->container['topic_guid'] = $data['topic_guid'] ?? null;
        $this->container['modified_author'] = $data['modified_author'] ?? null;
        $this->container['modified_date'] = $data['modified_date'] ?? null;
        $this->container['viewpoint_temp_id'] = $data['viewpoint_temp_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['author']) && (mb_strlen($this->container['author']) > 254)) {
            $invalidProperties[] = "invalid value for 'author', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['modified_author']) && (mb_strlen($this->container['modified_author']) > 254)) {
            $invalidProperties[] = "invalid value for 'modified_author', the character length must be smaller than or equal to 254.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (!is_null($author) && (mb_strlen($author) > 254)) {
            throw new \InvalidArgumentException('invalid length for $author when calling Comment., must be smaller than or equal to 254.');
        }

        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets viewpoint_guid
     *
     * @return string|null
     */
    public function getViewpointGuid()
    {
        return $this->container['viewpoint_guid'];
    }

    /**
     * Sets viewpoint_guid
     *
     * @param string|null $viewpoint_guid viewpoint_guid
     *
     * @return self
     */
    public function setViewpointGuid($viewpoint_guid)
    {
        $this->container['viewpoint_guid'] = $viewpoint_guid;

        return $this;
    }

    /**
     * Gets reply_to_comment_guid
     *
     * @return string|null
     */
    public function getReplyToCommentGuid()
    {
        return $this->container['reply_to_comment_guid'];
    }

    /**
     * Sets reply_to_comment_guid
     *
     * @param string|null $reply_to_comment_guid reply_to_comment_guid
     *
     * @return self
     */
    public function setReplyToCommentGuid($reply_to_comment_guid)
    {
        $this->container['reply_to_comment_guid'] = $reply_to_comment_guid;

        return $this;
    }

    /**
     * Gets topic_guid
     *
     * @return string|null
     */
    public function getTopicGuid()
    {
        return $this->container['topic_guid'];
    }

    /**
     * Sets topic_guid
     *
     * @param string|null $topic_guid topic_guid
     *
     * @return self
     */
    public function setTopicGuid($topic_guid)
    {
        $this->container['topic_guid'] = $topic_guid;

        return $this;
    }

    /**
     * Gets modified_author
     *
     * @return string|null
     */
    public function getModifiedAuthor()
    {
        return $this->container['modified_author'];
    }

    /**
     * Sets modified_author
     *
     * @param string|null $modified_author modified_author
     *
     * @return self
     */
    public function setModifiedAuthor($modified_author)
    {
        if (!is_null($modified_author) && (mb_strlen($modified_author) > 254)) {
            throw new \InvalidArgumentException('invalid length for $modified_author when calling Comment., must be smaller than or equal to 254.');
        }

        $this->container['modified_author'] = $modified_author;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime|null $modified_date modified_date
     *
     * @return self
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets viewpoint_temp_id
     *
     * @return int|null
     */
    public function getViewpointTempId()
    {
        return $this->container['viewpoint_temp_id'];
    }

    /**
     * Sets viewpoint_temp_id
     *
     * @param int|null $viewpoint_temp_id Only used when using POST on the full-topic route to bind viewpoint with comment
     *
     * @return self
     */
    public function setViewpointTempId($viewpoint_temp_id)
    {
        $this->container['viewpoint_temp_id'] = $viewpoint_temp_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


