<?php
/**
 * MarketplaceApp
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MarketplaceApp Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MarketplaceApp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarketplaceApp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'activation_webhook_url' => 'string',
        'post_activation_redirect_uri' => 'string',
        'viewer_plugins_urls' => 'string[]',
        'webhook_secret' => 'string',
        'creator' => '\OpenAPI\Client\Model\User',
        'scopes' => 'string[]',
        'settings_url' => 'string',
        'is_public' => 'bool',
        'tags' => 'string[]',
        'logo' => 'string',
        'images' => '\OpenAPI\Client\Model\MarketplaceAppImage[]',
        'organization_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'short_description' => null,
        'long_description' => null,
        'activation_webhook_url' => 'uri',
        'post_activation_redirect_uri' => 'uri',
        'viewer_plugins_urls' => 'uri',
        'webhook_secret' => null,
        'creator' => null,
        'scopes' => null,
        'settings_url' => 'uri',
        'is_public' => null,
        'tags' => null,
        'logo' => 'uri',
        'images' => null,
        'organization_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'short_description' => 'short_description',
        'long_description' => 'long_description',
        'activation_webhook_url' => 'activation_webhook_url',
        'post_activation_redirect_uri' => 'post_activation_redirect_uri',
        'viewer_plugins_urls' => 'viewer_plugins_urls',
        'webhook_secret' => 'webhook_secret',
        'creator' => 'creator',
        'scopes' => 'scopes',
        'settings_url' => 'settings_url',
        'is_public' => 'is_public',
        'tags' => 'tags',
        'logo' => 'logo',
        'images' => 'images',
        'organization_id' => 'organization_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'activation_webhook_url' => 'setActivationWebhookUrl',
        'post_activation_redirect_uri' => 'setPostActivationRedirectUri',
        'viewer_plugins_urls' => 'setViewerPluginsUrls',
        'webhook_secret' => 'setWebhookSecret',
        'creator' => 'setCreator',
        'scopes' => 'setScopes',
        'settings_url' => 'setSettingsUrl',
        'is_public' => 'setIsPublic',
        'tags' => 'setTags',
        'logo' => 'setLogo',
        'images' => 'setImages',
        'organization_id' => 'setOrganizationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'activation_webhook_url' => 'getActivationWebhookUrl',
        'post_activation_redirect_uri' => 'getPostActivationRedirectUri',
        'viewer_plugins_urls' => 'getViewerPluginsUrls',
        'webhook_secret' => 'getWebhookSecret',
        'creator' => 'getCreator',
        'scopes' => 'getScopes',
        'settings_url' => 'getSettingsUrl',
        'is_public' => 'getIsPublic',
        'tags' => 'getTags',
        'logo' => 'getLogo',
        'images' => 'getImages',
        'organization_id' => 'getOrganizationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['short_description'] = $data['short_description'] ?? null;
        $this->container['long_description'] = $data['long_description'] ?? null;
        $this->container['activation_webhook_url'] = $data['activation_webhook_url'] ?? null;
        $this->container['post_activation_redirect_uri'] = $data['post_activation_redirect_uri'] ?? null;
        $this->container['viewer_plugins_urls'] = $data['viewer_plugins_urls'] ?? null;
        $this->container['webhook_secret'] = $data['webhook_secret'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['scopes'] = $data['scopes'] ?? null;
        $this->container['settings_url'] = $data['settings_url'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['logo'] = $data['logo'] ?? null;
        $this->container['images'] = $data['images'] ?? null;
        $this->container['organization_id'] = $data['organization_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['short_description'] === null) {
            $invalidProperties[] = "'short_description' can't be null";
        }
        if ((mb_strlen($this->container['short_description']) > 130)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 130.";
        }

        if ((mb_strlen($this->container['short_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['long_description'] === null) {
            $invalidProperties[] = "'long_description' can't be null";
        }
        if ((mb_strlen($this->container['long_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'long_description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['activation_webhook_url']) && (mb_strlen($this->container['activation_webhook_url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'activation_webhook_url', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['post_activation_redirect_uri']) && (mb_strlen($this->container['post_activation_redirect_uri']) > 1024)) {
            $invalidProperties[] = "invalid value for 'post_activation_redirect_uri', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['webhook_secret']) && (mb_strlen($this->container['webhook_secret']) < 1)) {
            $invalidProperties[] = "invalid value for 'webhook_secret', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['settings_url']) && (mb_strlen($this->container['settings_url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'settings_url', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling MarketplaceApp., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling MarketplaceApp., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if ((mb_strlen($short_description) > 130)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling MarketplaceApp., must be smaller than or equal to 130.');
        }
        if ((mb_strlen($short_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling MarketplaceApp., must be bigger than or equal to 1.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description long_description
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {

        if ((mb_strlen($long_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $long_description when calling MarketplaceApp., must be bigger than or equal to 1.');
        }

        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets activation_webhook_url
     *
     * @return string|null
     */
    public function getActivationWebhookUrl()
    {
        return $this->container['activation_webhook_url'];
    }

    /**
     * Sets activation_webhook_url
     *
     * @param string|null $activation_webhook_url activation_webhook_url
     *
     * @return self
     */
    public function setActivationWebhookUrl($activation_webhook_url)
    {
        if (!is_null($activation_webhook_url) && (mb_strlen($activation_webhook_url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $activation_webhook_url when calling MarketplaceApp., must be smaller than or equal to 1024.');
        }

        $this->container['activation_webhook_url'] = $activation_webhook_url;

        return $this;
    }

    /**
     * Gets post_activation_redirect_uri
     *
     * @return string|null
     */
    public function getPostActivationRedirectUri()
    {
        return $this->container['post_activation_redirect_uri'];
    }

    /**
     * Sets post_activation_redirect_uri
     *
     * @param string|null $post_activation_redirect_uri post_activation_redirect_uri
     *
     * @return self
     */
    public function setPostActivationRedirectUri($post_activation_redirect_uri)
    {
        if (!is_null($post_activation_redirect_uri) && (mb_strlen($post_activation_redirect_uri) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $post_activation_redirect_uri when calling MarketplaceApp., must be smaller than or equal to 1024.');
        }

        $this->container['post_activation_redirect_uri'] = $post_activation_redirect_uri;

        return $this;
    }

    /**
     * Gets viewer_plugins_urls
     *
     * @return string[]|null
     */
    public function getViewerPluginsUrls()
    {
        return $this->container['viewer_plugins_urls'];
    }

    /**
     * Sets viewer_plugins_urls
     *
     * @param string[]|null $viewer_plugins_urls viewer_plugins_urls
     *
     * @return self
     */
    public function setViewerPluginsUrls($viewer_plugins_urls)
    {
        $this->container['viewer_plugins_urls'] = $viewer_plugins_urls;

        return $this;
    }

    /**
     * Gets webhook_secret
     *
     * @return string|null
     */
    public function getWebhookSecret()
    {
        return $this->container['webhook_secret'];
    }

    /**
     * Sets webhook_secret
     *
     * @param string|null $webhook_secret webhook_secret
     *
     * @return self
     */
    public function setWebhookSecret($webhook_secret)
    {

        if (!is_null($webhook_secret) && (mb_strlen($webhook_secret) < 1)) {
            throw new \InvalidArgumentException('invalid length for $webhook_secret when calling MarketplaceApp., must be bigger than or equal to 1.');
        }

        $this->container['webhook_secret'] = $webhook_secret;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\User|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes scopes
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets settings_url
     *
     * @return string|null
     */
    public function getSettingsUrl()
    {
        return $this->container['settings_url'];
    }

    /**
     * Sets settings_url
     *
     * @param string|null $settings_url this URL will be called with query params ?cloud_id=
     *
     * @return self
     */
    public function setSettingsUrl($settings_url)
    {
        if (!is_null($settings_url) && (mb_strlen($settings_url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $settings_url when calling MarketplaceApp., must be smaller than or equal to 1024.');
        }

        $this->container['settings_url'] = $settings_url;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {


        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\MarketplaceAppImage[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\MarketplaceAppImage[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


