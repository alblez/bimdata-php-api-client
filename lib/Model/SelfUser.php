<?php
/**
 * SelfUser
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SelfUser Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SelfUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SelfUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'email' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'organizations' => '\OpenAPI\Client\Model\Organization[]',
        'clouds' => '\OpenAPI\Client\Model\CloudRole[]',
        'projects' => '\OpenAPI\Client\Model\ProjectRole[]',
        'provider' => 'string',
        'provider_sub' => 'string',
        'sub' => 'string',
        'profile_picture' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'email' => 'email',
        'firstname' => null,
        'lastname' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'organizations' => null,
        'clouds' => null,
        'projects' => null,
        'provider' => null,
        'provider_sub' => null,
        'sub' => null,
        'profile_picture' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'organizations' => 'organizations',
        'clouds' => 'clouds',
        'projects' => 'projects',
        'provider' => 'provider',
        'provider_sub' => 'provider_sub',
        'sub' => 'sub',
        'profile_picture' => 'profile_picture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'organizations' => 'setOrganizations',
        'clouds' => 'setClouds',
        'projects' => 'setProjects',
        'provider' => 'setProvider',
        'provider_sub' => 'setProviderSub',
        'sub' => 'setSub',
        'profile_picture' => 'setProfilePicture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'organizations' => 'getOrganizations',
        'clouds' => 'getClouds',
        'projects' => 'getProjects',
        'provider' => 'getProvider',
        'provider_sub' => 'getProviderSub',
        'sub' => 'getSub',
        'profile_picture' => 'getProfilePicture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['firstname'] = $data['firstname'] ?? null;
        $this->container['lastname'] = $data['lastname'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['organizations'] = $data['organizations'] ?? null;
        $this->container['clouds'] = $data['clouds'] ?? null;
        $this->container['projects'] = $data['projects'] ?? null;
        $this->container['provider'] = $data['provider'] ?? null;
        $this->container['provider_sub'] = $data['provider_sub'] ?? null;
        $this->container['sub'] = $data['sub'] ?? null;
        $this->container['profile_picture'] = $data['profile_picture'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if ((mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['firstname'] === null) {
            $invalidProperties[] = "'firstname' can't be null";
        }
        if ((mb_strlen($this->container['firstname']) < 1)) {
            $invalidProperties[] = "invalid value for 'firstname', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lastname'] === null) {
            $invalidProperties[] = "'lastname' can't be null";
        }
        if ((mb_strlen($this->container['lastname']) < 1)) {
            $invalidProperties[] = "invalid value for 'lastname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['provider']) && (mb_strlen($this->container['provider']) < 1)) {
            $invalidProperties[] = "invalid value for 'provider', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['provider_sub']) && (mb_strlen($this->container['provider_sub']) > 255)) {
            $invalidProperties[] = "invalid value for 'provider_sub', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['sub']) && (mb_strlen($this->container['sub']) < 1)) {
            $invalidProperties[] = "invalid value for 'sub', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['profile_picture']) && (mb_strlen($this->container['profile_picture']) < 1)) {
            $invalidProperties[] = "invalid value for 'profile_picture', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling SelfUser., must be smaller than or equal to 254.');
        }
        if ((mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling SelfUser., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {

        if ((mb_strlen($firstname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $firstname when calling SelfUser., must be bigger than or equal to 1.');
        }

        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return self
     */
    public function setLastname($lastname)
    {

        if ((mb_strlen($lastname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $lastname when calling SelfUser., must be bigger than or equal to 1.');
        }

        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \OpenAPI\Client\Model\Organization[]|null
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \OpenAPI\Client\Model\Organization[]|null $organizations organizations
     *
     * @return self
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets clouds
     *
     * @return \OpenAPI\Client\Model\CloudRole[]|null
     */
    public function getClouds()
    {
        return $this->container['clouds'];
    }

    /**
     * Sets clouds
     *
     * @param \OpenAPI\Client\Model\CloudRole[]|null $clouds clouds
     *
     * @return self
     */
    public function setClouds($clouds)
    {
        $this->container['clouds'] = $clouds;

        return $this;
    }

    /**
     * Gets projects
     *
     * @return \OpenAPI\Client\Model\ProjectRole[]|null
     */
    public function getProjects()
    {
        return $this->container['projects'];
    }

    /**
     * Sets projects
     *
     * @param \OpenAPI\Client\Model\ProjectRole[]|null $projects projects
     *
     * @return self
     */
    public function setProjects($projects)
    {
        $this->container['projects'] = $projects;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return self
     */
    public function setProvider($provider)
    {

        if (!is_null($provider) && (mb_strlen($provider) < 1)) {
            throw new \InvalidArgumentException('invalid length for $provider when calling SelfUser., must be bigger than or equal to 1.');
        }

        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets provider_sub
     *
     * @return string|null
     */
    public function getProviderSub()
    {
        return $this->container['provider_sub'];
    }

    /**
     * Sets provider_sub
     *
     * @param string|null $provider_sub sub from original identity provider
     *
     * @return self
     */
    public function setProviderSub($provider_sub)
    {
        if (!is_null($provider_sub) && (mb_strlen($provider_sub) > 255)) {
            throw new \InvalidArgumentException('invalid length for $provider_sub when calling SelfUser., must be smaller than or equal to 255.');
        }

        $this->container['provider_sub'] = $provider_sub;

        return $this;
    }

    /**
     * Gets sub
     *
     * @return string|null
     */
    public function getSub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param string|null $sub sub from Keycloak
     *
     * @return self
     */
    public function setSub($sub)
    {

        if (!is_null($sub) && (mb_strlen($sub) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sub when calling SelfUser., must be bigger than or equal to 1.');
        }

        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets profile_picture
     *
     * @return string|null
     */
    public function getProfilePicture()
    {
        return $this->container['profile_picture'];
    }

    /**
     * Sets profile_picture
     *
     * @param string|null $profile_picture profile_picture
     *
     * @return self
     */
    public function setProfilePicture($profile_picture)
    {

        if (!is_null($profile_picture) && (mb_strlen($profile_picture) < 1)) {
            throw new \InvalidArgumentException('invalid length for $profile_picture when calling SelfUser., must be bigger than or equal to 1.');
        }

        $this->container['profile_picture'] = $profile_picture;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


