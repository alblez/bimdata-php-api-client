<?php
/**
 * Extensions
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Extensions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Extensions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Extensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'topic_type' => 'string[]',
        'topic_status' => 'string[]',
        'topic_label' => 'string[]',
        'priority' => 'string[]',
        'user_id_type' => 'string[]',
        'stage' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'topic_type' => null,
        'topic_status' => null,
        'topic_label' => null,
        'priority' => null,
        'user_id_type' => null,
        'stage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'topic_type' => 'topic_type',
        'topic_status' => 'topic_status',
        'topic_label' => 'topic_label',
        'priority' => 'priority',
        'user_id_type' => 'user_id_type',
        'stage' => 'stage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'topic_type' => 'setTopicType',
        'topic_status' => 'setTopicStatus',
        'topic_label' => 'setTopicLabel',
        'priority' => 'setPriority',
        'user_id_type' => 'setUserIdType',
        'stage' => 'setStage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'topic_type' => 'getTopicType',
        'topic_status' => 'getTopicStatus',
        'topic_label' => 'getTopicLabel',
        'priority' => 'getPriority',
        'user_id_type' => 'getUserIdType',
        'stage' => 'getStage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['topic_type'] = $data['topic_type'] ?? null;
        $this->container['topic_status'] = $data['topic_status'] ?? null;
        $this->container['topic_label'] = $data['topic_label'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['user_id_type'] = $data['user_id_type'] ?? null;
        $this->container['stage'] = $data['stage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['topic_type'] === null) {
            $invalidProperties[] = "'topic_type' can't be null";
        }
        if ($this->container['topic_status'] === null) {
            $invalidProperties[] = "'topic_status' can't be null";
        }
        if ($this->container['topic_label'] === null) {
            $invalidProperties[] = "'topic_label' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['stage'] === null) {
            $invalidProperties[] = "'stage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets topic_type
     *
     * @return string[]
     */
    public function getTopicType()
    {
        return $this->container['topic_type'];
    }

    /**
     * Sets topic_type
     *
     * @param string[] $topic_type topic_type
     *
     * @return self
     */
    public function setTopicType($topic_type)
    {
        $this->container['topic_type'] = $topic_type;

        return $this;
    }

    /**
     * Gets topic_status
     *
     * @return string[]
     */
    public function getTopicStatus()
    {
        return $this->container['topic_status'];
    }

    /**
     * Sets topic_status
     *
     * @param string[] $topic_status topic_status
     *
     * @return self
     */
    public function setTopicStatus($topic_status)
    {
        $this->container['topic_status'] = $topic_status;

        return $this;
    }

    /**
     * Gets topic_label
     *
     * @return string[]
     */
    public function getTopicLabel()
    {
        return $this->container['topic_label'];
    }

    /**
     * Sets topic_label
     *
     * @param string[] $topic_label topic_label
     *
     * @return self
     */
    public function setTopicLabel($topic_label)
    {
        $this->container['topic_label'] = $topic_label;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string[]
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string[] $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets user_id_type
     *
     * @return string[]|null
     */
    public function getUserIdType()
    {
        return $this->container['user_id_type'];
    }

    /**
     * Sets user_id_type
     *
     * @param string[]|null $user_id_type user_id_type
     *
     * @return self
     */
    public function setUserIdType($user_id_type)
    {
        $this->container['user_id_type'] = $user_id_type;

        return $this;
    }

    /**
     * Gets stage
     *
     * @return string[]
     */
    public function getStage()
    {
        return $this->container['stage'];
    }

    /**
     * Sets stage
     *
     * @param string[] $stage stage
     *
     * @return self
     */
    public function setStage($stage)
    {
        $this->container['stage'] = $stage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


