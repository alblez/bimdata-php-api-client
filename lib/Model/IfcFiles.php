<?php
/**
 * IfcFiles
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IfcFiles Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class IfcFiles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IfcFiles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'structure_file' => 'string',
        'systems_file' => 'string',
        'map_file' => 'string',
        'gltf_file' => 'string',
        'gltf_with_openings_file' => 'string',
        'bvh_tree_file' => 'string',
        'viewer_360_file' => 'string',
        'xkt_file' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'structure_file' => 'uri',
        'systems_file' => 'uri',
        'map_file' => 'uri',
        'gltf_file' => 'uri',
        'gltf_with_openings_file' => 'uri',
        'bvh_tree_file' => 'uri',
        'viewer_360_file' => 'uri',
        'xkt_file' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'structure_file' => 'structure_file',
        'systems_file' => 'systems_file',
        'map_file' => 'map_file',
        'gltf_file' => 'gltf_file',
        'gltf_with_openings_file' => 'gltf_with_openings_file',
        'bvh_tree_file' => 'bvh_tree_file',
        'viewer_360_file' => 'viewer_360_file',
        'xkt_file' => 'xkt_file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'structure_file' => 'setStructureFile',
        'systems_file' => 'setSystemsFile',
        'map_file' => 'setMapFile',
        'gltf_file' => 'setGltfFile',
        'gltf_with_openings_file' => 'setGltfWithOpeningsFile',
        'bvh_tree_file' => 'setBvhTreeFile',
        'viewer_360_file' => 'setViewer360File',
        'xkt_file' => 'setXktFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'structure_file' => 'getStructureFile',
        'systems_file' => 'getSystemsFile',
        'map_file' => 'getMapFile',
        'gltf_file' => 'getGltfFile',
        'gltf_with_openings_file' => 'getGltfWithOpeningsFile',
        'bvh_tree_file' => 'getBvhTreeFile',
        'viewer_360_file' => 'getViewer360File',
        'xkt_file' => 'getXktFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['structure_file'] = $data['structure_file'] ?? null;
        $this->container['systems_file'] = $data['systems_file'] ?? null;
        $this->container['map_file'] = $data['map_file'] ?? null;
        $this->container['gltf_file'] = $data['gltf_file'] ?? null;
        $this->container['gltf_with_openings_file'] = $data['gltf_with_openings_file'] ?? null;
        $this->container['bvh_tree_file'] = $data['bvh_tree_file'] ?? null;
        $this->container['viewer_360_file'] = $data['viewer_360_file'] ?? null;
        $this->container['xkt_file'] = $data['xkt_file'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets structure_file
     *
     * @return string|null
     */
    public function getStructureFile()
    {
        return $this->container['structure_file'];
    }

    /**
     * Sets structure_file
     *
     * @param string|null $structure_file structure_file
     *
     * @return self
     */
    public function setStructureFile($structure_file)
    {
        $this->container['structure_file'] = $structure_file;

        return $this;
    }

    /**
     * Gets systems_file
     *
     * @return string|null
     */
    public function getSystemsFile()
    {
        return $this->container['systems_file'];
    }

    /**
     * Sets systems_file
     *
     * @param string|null $systems_file systems_file
     *
     * @return self
     */
    public function setSystemsFile($systems_file)
    {
        $this->container['systems_file'] = $systems_file;

        return $this;
    }

    /**
     * Gets map_file
     *
     * @return string|null
     */
    public function getMapFile()
    {
        return $this->container['map_file'];
    }

    /**
     * Sets map_file
     *
     * @param string|null $map_file map_file
     *
     * @return self
     */
    public function setMapFile($map_file)
    {
        $this->container['map_file'] = $map_file;

        return $this;
    }

    /**
     * Gets gltf_file
     *
     * @return string|null
     */
    public function getGltfFile()
    {
        return $this->container['gltf_file'];
    }

    /**
     * Sets gltf_file
     *
     * @param string|null $gltf_file gltf_file
     *
     * @return self
     */
    public function setGltfFile($gltf_file)
    {
        $this->container['gltf_file'] = $gltf_file;

        return $this;
    }

    /**
     * Gets gltf_with_openings_file
     *
     * @return string|null
     */
    public function getGltfWithOpeningsFile()
    {
        return $this->container['gltf_with_openings_file'];
    }

    /**
     * Sets gltf_with_openings_file
     *
     * @param string|null $gltf_with_openings_file gltf_with_openings_file
     *
     * @return self
     */
    public function setGltfWithOpeningsFile($gltf_with_openings_file)
    {
        $this->container['gltf_with_openings_file'] = $gltf_with_openings_file;

        return $this;
    }

    /**
     * Gets bvh_tree_file
     *
     * @return string|null
     */
    public function getBvhTreeFile()
    {
        return $this->container['bvh_tree_file'];
    }

    /**
     * Sets bvh_tree_file
     *
     * @param string|null $bvh_tree_file bvh_tree_file
     *
     * @return self
     */
    public function setBvhTreeFile($bvh_tree_file)
    {
        $this->container['bvh_tree_file'] = $bvh_tree_file;

        return $this;
    }

    /**
     * Gets viewer_360_file
     *
     * @return string|null
     */
    public function getViewer360File()
    {
        return $this->container['viewer_360_file'];
    }

    /**
     * Sets viewer_360_file
     *
     * @param string|null $viewer_360_file viewer_360_file
     *
     * @return self
     */
    public function setViewer360File($viewer_360_file)
    {
        $this->container['viewer_360_file'] = $viewer_360_file;

        return $this;
    }

    /**
     * Gets xkt_file
     *
     * @return string|null
     */
    public function getXktFile()
    {
        return $this->container['xkt_file'];
    }

    /**
     * Sets xkt_file
     *
     * @param string|null $xkt_file xkt_file
     *
     * @return self
     */
    public function setXktFile($xkt_file)
    {
        $this->container['xkt_file'] = $xkt_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


