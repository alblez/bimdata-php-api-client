<?php
/**
 * Invitation
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Invitation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Invitation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invitation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'client_id' => 'string',
        'redirect_uri' => 'string',
        'cloud_name' => 'string',
        'cloud_role' => 'int',
        'project_name' => 'string',
        'project_role' => 'int',
        'email' => 'string',
        'status' => 'string',
        'sender_provider_sub' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'client_id' => null,
        'redirect_uri' => 'uri',
        'cloud_name' => null,
        'cloud_role' => null,
        'project_name' => null,
        'project_role' => null,
        'email' => null,
        'status' => null,
        'sender_provider_sub' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'client_id' => 'client_id',
        'redirect_uri' => 'redirect_uri',
        'cloud_name' => 'cloud_name',
        'cloud_role' => 'cloud_role',
        'project_name' => 'project_name',
        'project_role' => 'project_role',
        'email' => 'email',
        'status' => 'status',
        'sender_provider_sub' => 'sender_provider_sub'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'client_id' => 'setClientId',
        'redirect_uri' => 'setRedirectUri',
        'cloud_name' => 'setCloudName',
        'cloud_role' => 'setCloudRole',
        'project_name' => 'setProjectName',
        'project_role' => 'setProjectRole',
        'email' => 'setEmail',
        'status' => 'setStatus',
        'sender_provider_sub' => 'setSenderProviderSub'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'client_id' => 'getClientId',
        'redirect_uri' => 'getRedirectUri',
        'cloud_name' => 'getCloudName',
        'cloud_role' => 'getCloudRole',
        'project_name' => 'getProjectName',
        'project_role' => 'getProjectRole',
        'email' => 'getEmail',
        'status' => 'getStatus',
        'sender_provider_sub' => 'getSenderProviderSub'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_A = 'A';
    const STATUS_D = 'D';
    const STATUS_P = 'P';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_A,
            self::STATUS_D,
            self::STATUS_P,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['redirect_uri'] = $data['redirect_uri'] ?? null;
        $this->container['cloud_name'] = $data['cloud_name'] ?? null;
        $this->container['cloud_role'] = $data['cloud_role'] ?? null;
        $this->container['project_name'] = $data['project_name'] ?? null;
        $this->container['project_role'] = $data['project_role'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['sender_provider_sub'] = $data['sender_provider_sub'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['redirect_uri'] === null) {
            $invalidProperties[] = "'redirect_uri' can't be null";
        }
        if ((mb_strlen($this->container['redirect_uri']) > 512)) {
            $invalidProperties[] = "invalid value for 'redirect_uri', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['redirect_uri']) < 1)) {
            $invalidProperties[] = "invalid value for 'redirect_uri', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cloud_name'] === null) {
            $invalidProperties[] = "'cloud_name' can't be null";
        }
        if ((mb_strlen($this->container['cloud_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'cloud_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cloud_role'] === null) {
            $invalidProperties[] = "'cloud_role' can't be null";
        }
        if (!is_null($this->container['project_name']) && (mb_strlen($this->container['project_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'project_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 256)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sender_provider_sub']) && (mb_strlen($this->container['sender_provider_sub']) < 1)) {
            $invalidProperties[] = "invalid value for 'sender_provider_sub', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string $redirect_uri User will be redirected to this uri when they accept the invitation
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        if ((mb_strlen($redirect_uri) > 512)) {
            throw new \InvalidArgumentException('invalid length for $redirect_uri when calling Invitation., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($redirect_uri) < 1)) {
            throw new \InvalidArgumentException('invalid length for $redirect_uri when calling Invitation., must be bigger than or equal to 1.');
        }

        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets cloud_name
     *
     * @return string
     */
    public function getCloudName()
    {
        return $this->container['cloud_name'];
    }

    /**
     * Sets cloud_name
     *
     * @param string $cloud_name cloud_name
     *
     * @return self
     */
    public function setCloudName($cloud_name)
    {

        if ((mb_strlen($cloud_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cloud_name when calling Invitation., must be bigger than or equal to 1.');
        }

        $this->container['cloud_name'] = $cloud_name;

        return $this;
    }

    /**
     * Gets cloud_role
     *
     * @return int
     */
    public function getCloudRole()
    {
        return $this->container['cloud_role'];
    }

    /**
     * Sets cloud_role
     *
     * @param int $cloud_role Role the user will have when they accept the invitation
     *
     * @return self
     */
    public function setCloudRole($cloud_role)
    {
        $this->container['cloud_role'] = $cloud_role;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name project_name
     *
     * @return self
     */
    public function setProjectName($project_name)
    {

        if (!is_null($project_name) && (mb_strlen($project_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $project_name when calling Invitation., must be bigger than or equal to 1.');
        }

        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets project_role
     *
     * @return int|null
     */
    public function getProjectRole()
    {
        return $this->container['project_role'];
    }

    /**
     * Sets project_role
     *
     * @param int|null $project_role Role the user will have when they accept the invitation
     *
     * @return self
     */
    public function setProjectRole($project_role)
    {
        $this->container['project_role'] = $project_role;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email of the user to invite
     *
     * @return self
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 256)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Invitation., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Invitation., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status A: Accepted D: Denied P: Pending
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sender_provider_sub
     *
     * @return string|null
     */
    public function getSenderProviderSub()
    {
        return $this->container['sender_provider_sub'];
    }

    /**
     * Sets sender_provider_sub
     *
     * @param string|null $sender_provider_sub OIDC sub of the sender. The original sub from the provider is used instead of the broker sub
     *
     * @return self
     */
    public function setSenderProviderSub($sender_provider_sub)
    {

        if (!is_null($sender_provider_sub) && (mb_strlen($sender_provider_sub) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sender_provider_sub when calling Invitation., must be bigger than or equal to 1.');
        }

        $this->container['sender_provider_sub'] = $sender_provider_sub;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


