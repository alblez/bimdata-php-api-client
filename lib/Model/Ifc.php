<?php
/**
 * Ifc
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Ifc Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Ifc implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Ifc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'creator' => '\OpenAPI\Client\Model\User',
        'status' => 'string',
        'source' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'document_id' => 'string',
        'document' => '\OpenAPI\Client\Model\Document',
        'structure_file' => 'string',
        'systems_file' => 'string',
        'map_file' => 'string',
        'gltf_file' => 'string',
        'bvh_tree_file' => 'string',
        'viewer_360_file' => 'string',
        'xkt_file' => 'string',
        'project_id' => 'string',
        'world_position' => 'float[]',
        'errors' => 'string[]',
        'warnings' => 'string[]',
        'archived' => 'bool',
        'version' => 'string',
        'north_vector' => 'float[][]',
        'recommanded_2d_angle' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'creator' => null,
        'status' => null,
        'source' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'document_id' => null,
        'document' => null,
        'structure_file' => 'uri',
        'systems_file' => 'uri',
        'map_file' => 'uri',
        'gltf_file' => 'uri',
        'bvh_tree_file' => 'uri',
        'viewer_360_file' => 'uri',
        'xkt_file' => 'uri',
        'project_id' => null,
        'world_position' => null,
        'errors' => null,
        'warnings' => null,
        'archived' => null,
        'version' => null,
        'north_vector' => null,
        'recommanded_2d_angle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'creator' => 'creator',
        'status' => 'status',
        'source' => 'source',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'document_id' => 'document_id',
        'document' => 'document',
        'structure_file' => 'structure_file',
        'systems_file' => 'systems_file',
        'map_file' => 'map_file',
        'gltf_file' => 'gltf_file',
        'bvh_tree_file' => 'bvh_tree_file',
        'viewer_360_file' => 'viewer_360_file',
        'xkt_file' => 'xkt_file',
        'project_id' => 'project_id',
        'world_position' => 'world_position',
        'errors' => 'errors',
        'warnings' => 'warnings',
        'archived' => 'archived',
        'version' => 'version',
        'north_vector' => 'north_vector',
        'recommanded_2d_angle' => 'recommanded_2d_angle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'creator' => 'setCreator',
        'status' => 'setStatus',
        'source' => 'setSource',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'document_id' => 'setDocumentId',
        'document' => 'setDocument',
        'structure_file' => 'setStructureFile',
        'systems_file' => 'setSystemsFile',
        'map_file' => 'setMapFile',
        'gltf_file' => 'setGltfFile',
        'bvh_tree_file' => 'setBvhTreeFile',
        'viewer_360_file' => 'setViewer360File',
        'xkt_file' => 'setXktFile',
        'project_id' => 'setProjectId',
        'world_position' => 'setWorldPosition',
        'errors' => 'setErrors',
        'warnings' => 'setWarnings',
        'archived' => 'setArchived',
        'version' => 'setVersion',
        'north_vector' => 'setNorthVector',
        'recommanded_2d_angle' => 'setRecommanded2dAngle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'creator' => 'getCreator',
        'status' => 'getStatus',
        'source' => 'getSource',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'document_id' => 'getDocumentId',
        'document' => 'getDocument',
        'structure_file' => 'getStructureFile',
        'systems_file' => 'getSystemsFile',
        'map_file' => 'getMapFile',
        'gltf_file' => 'getGltfFile',
        'bvh_tree_file' => 'getBvhTreeFile',
        'viewer_360_file' => 'getViewer360File',
        'xkt_file' => 'getXktFile',
        'project_id' => 'getProjectId',
        'world_position' => 'getWorldPosition',
        'errors' => 'getErrors',
        'warnings' => 'getWarnings',
        'archived' => 'getArchived',
        'version' => 'getVersion',
        'north_vector' => 'getNorthVector',
        'recommanded_2d_angle' => 'getRecommanded2dAngle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SOURCE_UPLOAD = 'UPLOAD';
    const SOURCE_SPLIT = 'SPLIT';
    const SOURCE_MERGE = 'MERGE';
    const SOURCE_EXPORT = 'EXPORT';
    const SOURCE_OPTIMIZED = 'OPTIMIZED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_UPLOAD,
            self::SOURCE_SPLIT,
            self::SOURCE_MERGE,
            self::SOURCE_EXPORT,
            self::SOURCE_OPTIMIZED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['document_id'] = $data['document_id'] ?? null;
        $this->container['document'] = $data['document'] ?? null;
        $this->container['structure_file'] = $data['structure_file'] ?? null;
        $this->container['systems_file'] = $data['systems_file'] ?? null;
        $this->container['map_file'] = $data['map_file'] ?? null;
        $this->container['gltf_file'] = $data['gltf_file'] ?? null;
        $this->container['bvh_tree_file'] = $data['bvh_tree_file'] ?? null;
        $this->container['viewer_360_file'] = $data['viewer_360_file'] ?? null;
        $this->container['xkt_file'] = $data['xkt_file'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['world_position'] = $data['world_position'] ?? null;
        $this->container['errors'] = $data['errors'] ?? null;
        $this->container['warnings'] = $data['warnings'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['north_vector'] = $data['north_vector'] ?? null;
        $this->container['recommanded_2d_angle'] = $data['recommanded_2d_angle'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['world_position']) && (count($this->container['world_position']) > 3)) {
            $invalidProperties[] = "invalid value for 'world_position', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 256)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['north_vector']) && (count($this->container['north_vector']) > 2)) {
            $invalidProperties[] = "invalid value for 'north_vector', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \OpenAPI\Client\Model\User|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id document_id
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \OpenAPI\Client\Model\Document|null
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \OpenAPI\Client\Model\Document|null $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets structure_file
     *
     * @return string|null
     */
    public function getStructureFile()
    {
        return $this->container['structure_file'];
    }

    /**
     * Sets structure_file
     *
     * @param string|null $structure_file structure_file
     *
     * @return self
     */
    public function setStructureFile($structure_file)
    {
        $this->container['structure_file'] = $structure_file;

        return $this;
    }

    /**
     * Gets systems_file
     *
     * @return string|null
     */
    public function getSystemsFile()
    {
        return $this->container['systems_file'];
    }

    /**
     * Sets systems_file
     *
     * @param string|null $systems_file systems_file
     *
     * @return self
     */
    public function setSystemsFile($systems_file)
    {
        $this->container['systems_file'] = $systems_file;

        return $this;
    }

    /**
     * Gets map_file
     *
     * @return string|null
     */
    public function getMapFile()
    {
        return $this->container['map_file'];
    }

    /**
     * Sets map_file
     *
     * @param string|null $map_file map_file
     *
     * @return self
     */
    public function setMapFile($map_file)
    {
        $this->container['map_file'] = $map_file;

        return $this;
    }

    /**
     * Gets gltf_file
     *
     * @return string|null
     */
    public function getGltfFile()
    {
        return $this->container['gltf_file'];
    }

    /**
     * Sets gltf_file
     *
     * @param string|null $gltf_file gltf_file
     *
     * @return self
     */
    public function setGltfFile($gltf_file)
    {
        $this->container['gltf_file'] = $gltf_file;

        return $this;
    }

    /**
     * Gets bvh_tree_file
     *
     * @return string|null
     */
    public function getBvhTreeFile()
    {
        return $this->container['bvh_tree_file'];
    }

    /**
     * Sets bvh_tree_file
     *
     * @param string|null $bvh_tree_file bvh_tree_file
     *
     * @return self
     */
    public function setBvhTreeFile($bvh_tree_file)
    {
        $this->container['bvh_tree_file'] = $bvh_tree_file;

        return $this;
    }

    /**
     * Gets viewer_360_file
     *
     * @return string|null
     */
    public function getViewer360File()
    {
        return $this->container['viewer_360_file'];
    }

    /**
     * Sets viewer_360_file
     *
     * @param string|null $viewer_360_file viewer_360_file
     *
     * @return self
     */
    public function setViewer360File($viewer_360_file)
    {
        $this->container['viewer_360_file'] = $viewer_360_file;

        return $this;
    }

    /**
     * Gets xkt_file
     *
     * @return string|null
     */
    public function getXktFile()
    {
        return $this->container['xkt_file'];
    }

    /**
     * Sets xkt_file
     *
     * @param string|null $xkt_file xkt_file
     *
     * @return self
     */
    public function setXktFile($xkt_file)
    {
        $this->container['xkt_file'] = $xkt_file;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets world_position
     *
     * @return float[]|null
     */
    public function getWorldPosition()
    {
        return $this->container['world_position'];
    }

    /**
     * Sets world_position
     *
     * @param float[]|null $world_position [x,y,z] array of the position of the local_placement in world coordinates
     *
     * @return self
     */
    public function setWorldPosition($world_position)
    {

        if (!is_null($world_position) && (count($world_position) > 3)) {
            throw new \InvalidArgumentException('invalid value for $world_position when calling Ifc., number of items must be less than or equal to 3.');
        }
        $this->container['world_position'] = $world_position;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return string[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param string[]|null $errors List of errors that happened during IFC processing
     *
     * @return self
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[]|null $warnings List of warnings that happened during IFC processing
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version This field is only for information. Updating it won't impact the export.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (!is_null($version) && (mb_strlen($version) > 256)) {
            throw new \InvalidArgumentException('invalid length for $version when calling Ifc., must be smaller than or equal to 256.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets north_vector
     *
     * @return float[][]|null
     */
    public function getNorthVector()
    {
        return $this->container['north_vector'];
    }

    /**
     * Sets north_vector
     *
     * @param float[][]|null $north_vector This field is only for information. Updating it won't impact the export.
     *
     * @return self
     */
    public function setNorthVector($north_vector)
    {

        if (!is_null($north_vector) && (count($north_vector) > 2)) {
            throw new \InvalidArgumentException('invalid value for $north_vector when calling Ifc., number of items must be less than or equal to 2.');
        }
        $this->container['north_vector'] = $north_vector;

        return $this;
    }

    /**
     * Gets recommanded_2d_angle
     *
     * @return float|null
     */
    public function getRecommanded2dAngle()
    {
        return $this->container['recommanded_2d_angle'];
    }

    /**
     * Sets recommanded_2d_angle
     *
     * @param float|null $recommanded_2d_angle This is the angle in clockwise degree to apply on the 2D to optimise the horizontality of objects. This field is only for information. Updating it won't impact the export.
     *
     * @return self
     */
    public function setRecommanded2dAngle($recommanded_2d_angle)
    {
        $this->container['recommanded_2d_angle'] = $recommanded_2d_angle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


