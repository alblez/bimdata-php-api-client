<?php
/**
 * Document
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'parent' => 'int',
        'parent_id' => 'int',
        'creator' => 'int',
        'project' => 'int',
        'name' => 'string',
        'file_name' => 'string',
        'description' => 'string',
        'file' => 'string',
        'size' => 'int',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'ifc_source' => 'string',
        'ifc_id' => 'string',
        'user_permission' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'parent' => null,
        'parent_id' => null,
        'creator' => null,
        'project' => null,
        'name' => null,
        'file_name' => null,
        'description' => null,
        'file' => 'uri',
        'size' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'ifc_source' => null,
        'ifc_id' => null,
        'user_permission' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent' => 'parent',
        'parent_id' => 'parent_id',
        'creator' => 'creator',
        'project' => 'project',
        'name' => 'name',
        'file_name' => 'file_name',
        'description' => 'description',
        'file' => 'file',
        'size' => 'size',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'ifc_source' => 'ifc_source',
        'ifc_id' => 'ifc_id',
        'user_permission' => 'user_permission'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent' => 'setParent',
        'parent_id' => 'setParentId',
        'creator' => 'setCreator',
        'project' => 'setProject',
        'name' => 'setName',
        'file_name' => 'setFileName',
        'description' => 'setDescription',
        'file' => 'setFile',
        'size' => 'setSize',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'ifc_source' => 'setIfcSource',
        'ifc_id' => 'setIfcId',
        'user_permission' => 'setUserPermission'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent' => 'getParent',
        'parent_id' => 'getParentId',
        'creator' => 'getCreator',
        'project' => 'getProject',
        'name' => 'getName',
        'file_name' => 'getFileName',
        'description' => 'getDescription',
        'file' => 'getFile',
        'size' => 'getSize',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'ifc_source' => 'getIfcSource',
        'ifc_id' => 'getIfcId',
        'user_permission' => 'getUserPermission'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const IFC_SOURCE_UPLOAD = 'UPLOAD';
    const IFC_SOURCE_SPLIT = 'SPLIT';
    const IFC_SOURCE_MERGE = 'MERGE';
    const IFC_SOURCE_EXPORT = 'EXPORT';
    const IFC_SOURCE_OPTIMIZED = 'OPTIMIZED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIfcSourceAllowableValues()
    {
        return [
            self::IFC_SOURCE_UPLOAD,
            self::IFC_SOURCE_SPLIT,
            self::IFC_SOURCE_MERGE,
            self::IFC_SOURCE_EXPORT,
            self::IFC_SOURCE_OPTIMIZED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['parent'] = $data['parent'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['creator'] = $data['creator'] ?? null;
        $this->container['project'] = $data['project'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['file'] = $data['file'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['ifc_source'] = $data['ifc_source'] ?? null;
        $this->container['ifc_id'] = $data['ifc_id'] ?? null;
        $this->container['user_permission'] = $data['user_permission'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 512)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['file_name']) && (mb_strlen($this->container['file_name']) > 512)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['file_name']) && (mb_strlen($this->container['file_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'size', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['size']) && ($this->container['size'] < 0)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIfcSourceAllowableValues();
        if (!is_null($this->container['ifc_source']) && !in_array($this->container['ifc_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ifc_source', must be one of '%s'",
                $this->container['ifc_source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return int|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param int|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return int|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param int|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets project
     *
     * @return int|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param int|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Shown name of the file
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Document., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Document., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Full name of the file
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (!is_null($file_name) && (mb_strlen($file_name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling Document., must be smaller than or equal to 512.');
        }
        if (!is_null($file_name) && (mb_strlen($file_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling Document., must be bigger than or equal to 1.');
        }

        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the file
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Size of the file.
     *
     * @return self
     */
    public function setSize($size)
    {

        if (!is_null($size) && ($size > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $size when calling Document., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($size) && ($size < 0)) {
            throw new \InvalidArgumentException('invalid value for $size when calling Document., must be bigger than or equal to 0.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Creation date
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Date of the last update
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets ifc_source
     *
     * @return string|null
     */
    public function getIfcSource()
    {
        return $this->container['ifc_source'];
    }

    /**
     * Sets ifc_source
     *
     * @param string|null $ifc_source Define the ifc.source field if the upload is an IFC
     *
     * @return self
     */
    public function setIfcSource($ifc_source)
    {
        $allowedValues = $this->getIfcSourceAllowableValues();
        if (!is_null($ifc_source) && !in_array($ifc_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ifc_source', must be one of '%s'",
                    $ifc_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ifc_source'] = $ifc_source;

        return $this;
    }

    /**
     * Gets ifc_id
     *
     * @return string|null
     */
    public function getIfcId()
    {
        return $this->container['ifc_id'];
    }

    /**
     * Sets ifc_id
     *
     * @param string|null $ifc_id ifc_id
     *
     * @return self
     */
    public function setIfcId($ifc_id)
    {
        $this->container['ifc_id'] = $ifc_id;

        return $this;
    }

    /**
     * Gets user_permission
     *
     * @return int|null
     */
    public function getUserPermission()
    {
        return $this->container['user_permission'];
    }

    /**
     * Sets user_permission
     *
     * @param int|null $user_permission Aggregate of group user permissions and folder default permission
     *
     * @return self
     */
    public function setUserPermission($user_permission)
    {
        $this->container['user_permission'] = $user_permission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


