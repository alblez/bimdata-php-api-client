<?php
/**
 * RawElements
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RawElements Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RawElements implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RawElements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'units' => '\OpenAPI\Client\Model\RawUnit[]',
        'definitions' => '\OpenAPI\Client\Model\RawDefinition[]',
        'property_sets' => '\OpenAPI\Client\Model\RawPropertySet[]',
        'classifications' => '\OpenAPI\Client\Model\RawClassification[]',
        'layers' => '\OpenAPI\Client\Model\RawLayer[]',
        'systems' => '\OpenAPI\Client\Model\RawSystem[]',
        'materials' => '\OpenAPI\Client\Model\RawMaterialList',
        'elements' => '\OpenAPI\Client\Model\RawElement[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'units' => null,
        'definitions' => null,
        'property_sets' => null,
        'classifications' => null,
        'layers' => null,
        'systems' => null,
        'materials' => null,
        'elements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'units' => 'units',
        'definitions' => 'definitions',
        'property_sets' => 'property_sets',
        'classifications' => 'classifications',
        'layers' => 'layers',
        'systems' => 'systems',
        'materials' => 'materials',
        'elements' => 'elements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'units' => 'setUnits',
        'definitions' => 'setDefinitions',
        'property_sets' => 'setPropertySets',
        'classifications' => 'setClassifications',
        'layers' => 'setLayers',
        'systems' => 'setSystems',
        'materials' => 'setMaterials',
        'elements' => 'setElements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'units' => 'getUnits',
        'definitions' => 'getDefinitions',
        'property_sets' => 'getPropertySets',
        'classifications' => 'getClassifications',
        'layers' => 'getLayers',
        'systems' => 'getSystems',
        'materials' => 'getMaterials',
        'elements' => 'getElements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['units'] = $data['units'] ?? null;
        $this->container['definitions'] = $data['definitions'] ?? null;
        $this->container['property_sets'] = $data['property_sets'] ?? null;
        $this->container['classifications'] = $data['classifications'] ?? null;
        $this->container['layers'] = $data['layers'] ?? null;
        $this->container['systems'] = $data['systems'] ?? null;
        $this->container['materials'] = $data['materials'] ?? null;
        $this->container['elements'] = $data['elements'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['elements'] === null) {
            $invalidProperties[] = "'elements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets units
     *
     * @return \OpenAPI\Client\Model\RawUnit[]|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param \OpenAPI\Client\Model\RawUnit[]|null $units units
     *
     * @return self
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets definitions
     *
     * @return \OpenAPI\Client\Model\RawDefinition[]|null
     */
    public function getDefinitions()
    {
        return $this->container['definitions'];
    }

    /**
     * Sets definitions
     *
     * @param \OpenAPI\Client\Model\RawDefinition[]|null $definitions definitions
     *
     * @return self
     */
    public function setDefinitions($definitions)
    {
        $this->container['definitions'] = $definitions;

        return $this;
    }

    /**
     * Gets property_sets
     *
     * @return \OpenAPI\Client\Model\RawPropertySet[]|null
     */
    public function getPropertySets()
    {
        return $this->container['property_sets'];
    }

    /**
     * Sets property_sets
     *
     * @param \OpenAPI\Client\Model\RawPropertySet[]|null $property_sets property_sets
     *
     * @return self
     */
    public function setPropertySets($property_sets)
    {
        $this->container['property_sets'] = $property_sets;

        return $this;
    }

    /**
     * Gets classifications
     *
     * @return \OpenAPI\Client\Model\RawClassification[]|null
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \OpenAPI\Client\Model\RawClassification[]|null $classifications classifications
     *
     * @return self
     */
    public function setClassifications($classifications)
    {
        $this->container['classifications'] = $classifications;

        return $this;
    }

    /**
     * Gets layers
     *
     * @return \OpenAPI\Client\Model\RawLayer[]|null
     */
    public function getLayers()
    {
        return $this->container['layers'];
    }

    /**
     * Sets layers
     *
     * @param \OpenAPI\Client\Model\RawLayer[]|null $layers layers
     *
     * @return self
     */
    public function setLayers($layers)
    {
        $this->container['layers'] = $layers;

        return $this;
    }

    /**
     * Gets systems
     *
     * @return \OpenAPI\Client\Model\RawSystem[]|null
     */
    public function getSystems()
    {
        return $this->container['systems'];
    }

    /**
     * Sets systems
     *
     * @param \OpenAPI\Client\Model\RawSystem[]|null $systems systems
     *
     * @return self
     */
    public function setSystems($systems)
    {
        $this->container['systems'] = $systems;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return \OpenAPI\Client\Model\RawMaterialList|null
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param \OpenAPI\Client\Model\RawMaterialList|null $materials materials
     *
     * @return self
     */
    public function setMaterials($materials)
    {
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets elements
     *
     * @return \OpenAPI\Client\Model\RawElement[]
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * Sets elements
     *
     * @param \OpenAPI\Client\Model\RawElement[] $elements elements
     *
     * @return self
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


